        -:    0:Source:/usr/include/c++/11/bits/allocator.h
        -:    0:Graph:/home/ownstreamer/proga/C++/Parsers/cmake-build-debug-coverage/GoogleTests/CMakeFiles/Google_Tests_run.dir/src/TestsEarley.cpp.gcno
        -:    0:Data:/home/ownstreamer/proga/C++/Parsers/cmake-build-debug-coverage/GoogleTests/CMakeFiles/Google_Tests_run.dir/src/TestsEarley.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:#define __cpp_lib_incomplete_container_elements 201505
        -:   53:
        -:   54:namespace std _GLIBCXX_VISIBILITY(default)
        -:   55:{
        -:   56:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   57:
        -:   58:  /**
        -:   59:   *  @addtogroup allocators
        -:   60:   *  @{
        -:   61:   */
        -:   62:
        -:   63:  // Since C++20 the primary template should be used for allocator<void>,
        -:   64:  // but then it would have a non-trivial default ctor and dtor for C++20,
        -:   65:  // but trivial for C++98-17, which would be an ABI incompatibiliy between
        -:   66:  // different standard dialects. So C++20 still uses the allocator<void>
        -:   67:  // explicit specialization, with the historical ABI properties, but with
        -:   68:  // the same members that are present in the primary template.
        -:   69:
        -:   70:  /// allocator<void> specialization.
        -:   71:  template<>
        -:   72:    class allocator<void>
        -:   73:    {
        -:   74:    public:
        -:   75:      typedef void        value_type;
        -:   76:      typedef size_t      size_type;
        -:   77:      typedef ptrdiff_t   difference_type;
        -:   78:
        -:   79:#if __cplusplus <= 201703L
        -:   80:      // These were removed for C++20, allocator_traits does the right thing.
        -:   81:      typedef void*       pointer;
        -:   82:      typedef const void* const_pointer;
        -:   83:
        -:   84:      template<typename _Tp1>
        -:   85:	struct rebind
        -:   86:	{ typedef allocator<_Tp1> other; };
        -:   87:#endif
        -:   88:
        -:   89:#if __cplusplus >= 201103L
        -:   90:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   91:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   92:      using propagate_on_container_move_assignment = true_type;
        -:   93:
        -:   94:      using is_always_equal
        -:   95:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:   96:	= true_type;
        -:   97:
        -:   98:#if __cplusplus >= 202002L
        -:   99:      // As noted above, these members are present for C++20 to provide the
        -:  100:      // same API as the primary template, but still trivial as in pre-C++20.
        -:  101:      allocator() = default;
        -:  102:      ~allocator() = default;
        -:  103:
        -:  104:      template<typename _Up>
        -:  105:	constexpr
        -:  106:	allocator(const allocator<_Up>&) noexcept { }
        -:  107:
        -:  108:      // No allocate member because it's ill-formed by LWG 3307.
        -:  109:      // No deallocate member because it would be undefined to call it
        -:  110:      // with any pointer which wasn't obtained from allocate.
        -:  111:#endif // C++20
        -:  112:#endif // C++11
        -:  113:    };
        -:  114:
        -:  115:  /**
        -:  116:   * @brief  The @a standard allocator, as per C++03 [20.4.1].
        -:  117:   *
        -:  118:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  119:   *  for further details.
        -:  120:   *
        -:  121:   *  @tparam  _Tp  Type of allocated object.
        -:  122:   */
        -:  123:  template<typename _Tp>
        -:  124:    class allocator : public __allocator_base<_Tp>
        -:  125:    {
        -:  126:    public:
        -:  127:      typedef _Tp        value_type;
        -:  128:      typedef size_t     size_type;
        -:  129:      typedef ptrdiff_t  difference_type;
        -:  130:
        -:  131:#if __cplusplus <= 201703L
        -:  132:      // These were removed for C++20.
        -:  133:      typedef _Tp*       pointer;
        -:  134:      typedef const _Tp* const_pointer;
        -:  135:      typedef _Tp&       reference;
        -:  136:      typedef const _Tp& const_reference;
        -:  137:
        -:  138:      template<typename _Tp1>
        -:  139:	struct rebind
        -:  140:	{ typedef allocator<_Tp1> other; };
        -:  141:#endif
        -:  142:
        -:  143:#if __cplusplus >= 201103L
        -:  144:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  145:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  146:      using propagate_on_container_move_assignment = true_type;
        -:  147:
        -:  148:      using is_always_equal
        -:  149:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:  150:	= true_type;
        -:  151:#endif
        -:  152:
        -:  153:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  154:      // 3035. std::allocator's constructors should be constexpr
        -:  155:      _GLIBCXX20_CONSTEXPR
   205109:  156:      allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEEEC2Ev:
function _ZNSaISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEEEC2Ev called 48 returned 100% blocks executed 100%
       48:  156:      allocator() _GLIBCXX_NOTHROW { }
       48:  156-block  0
call    0 returned 48
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt6vectorISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEESaISA_EEELb0EEEEC2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt6vectorISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEESaISA_EEELb0EEEEC2Ev called 14 returned 100% blocks executed 100%
       14:  156:      allocator() _GLIBCXX_NOTHROW { }
       14:  156-block  0
call    0 returned 14
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS6_15SituationHasherESt8equal_toIS6_ESaIS6_EEELb0EEEEC2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS6_15SituationHasherESt8equal_toIS6_ESaIS6_EEELb0EEEEC2Ev called 101327 returned 100% blocks executed 100%
   101327:  156:      allocator() _GLIBCXX_NOTHROW { }
   101327:  156-block  0
call    0 returned 101327
------------------
_ZNSaImEC2Ev:
function _ZNSaImEC2Ev called 735 returned 100% blocks executed 100%
      735:  156:      allocator() _GLIBCXX_NOTHROW { }
      735:  156-block  0
call    0 returned 735
------------------
_ZNSaINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC2Ev:
function _ZNSaINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC2Ev called 275 returned 100% blocks executed 100%
      275:  156:      allocator() _GLIBCXX_NOTHROW { }
      275:  156-block  0
call    0 returned 275
------------------
_ZNSaIN17BasicEarleyParserIwE9SituationEEC2Ev:
function _ZNSaIN17BasicEarleyParserIwE9SituationEEC2Ev called 334 returned 100% blocks executed 100%
      334:  156:      allocator() _GLIBCXX_NOTHROW { }
      334:  156-block  0
call    0 returned 334
------------------
_ZNSaISt6vectorIlSaIlEEEC2Ev:
function _ZNSaISt6vectorIlSaIlEEEC2Ev called 104 returned 100% blocks executed 100%
      104:  156:      allocator() _GLIBCXX_NOTHROW { }
      104:  156-block  0
call    0 returned 104
------------------
_ZNSaIlEC2Ev:
function _ZNSaIlEC2Ev called 302 returned 100% blocks executed 100%
      302:  156:      allocator() _GLIBCXX_NOTHROW { }
      302:  156-block  0
call    0 returned 302
------------------
_ZNSaINSt8__detail10_Hash_nodeIN17BasicEarleyParserIwE9SituationELb1EEEEC2Ev:
function _ZNSaINSt8__detail10_Hash_nodeIN17BasicEarleyParserIwE9SituationELb1EEEEC2Ev called 101592 returned 100% blocks executed 100%
   101592:  156:      allocator() _GLIBCXX_NOTHROW { }
   101592:  156-block  0
call    0 returned 101592
------------------
_ZNSaINSt8__detail10_Hash_nodeIlLb0EEEEC2Ev:
function _ZNSaINSt8__detail10_Hash_nodeIlLb0EEEEC2Ev called 128 returned 100% blocks executed 100%
      128:  156:      allocator() _GLIBCXX_NOTHROW { }
      128:  156-block  0
call    0 returned 128
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt6vectorIS3_IlSaIlEESaIS5_EEELb0EEEEC2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt6vectorIS3_IlSaIlEESaIS5_EEELb0EEEEC2Ev called 37 returned 100% blocks executed 100%
       37:  156:      allocator() _GLIBCXX_NOTHROW { }
       37:  156-block  0
call    0 returned 37
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEElELb1EEEEC2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEElELb1EEEEC2Ev called 23 returned 100% blocks executed 100%
       23:  156:      allocator() _GLIBCXX_NOTHROW { }
       23:  156-block  0
call    0 returned 23
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKlNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEELb0EEEEC2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKlNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEELb0EEEEC2Ev called 23 returned 100% blocks executed 100%
       23:  156:      allocator() _GLIBCXX_NOTHROW { }
       23:  156-block  0
call    0 returned 23
------------------
_ZNSaISt13unordered_mapIlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS3_15SituationHasherESt8equal_toIS3_ESaIS3_EESt4hashIlES5_IlESaISt4pairIKlS8_EEEEC2Ev:
function _ZNSaISt13unordered_mapIlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS3_15SituationHasherESt8equal_toIS3_ESaIS3_EESt4hashIlES5_IlESaISt4pairIKlS8_EEEEC2Ev called 167 returned 100% blocks executed 100%
      167:  156:      allocator() _GLIBCXX_NOTHROW { }
      167:  156-block  0
call    0 returned 167
------------------
        -:  157:
        -:  158:      _GLIBCXX20_CONSTEXPR
     3104:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
     3104:  160:      : __allocator_base<_Tp>(__a) { }
------------------
_ZNSaINSt8__detail10_Hash_nodeIlLb0EEEEC2ERKS2_:
function _ZNSaINSt8__detail10_Hash_nodeIlLb0EEEEC2ERKS2_ called 142 returned 100% blocks executed 100%
      142:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
      142:  160:      : __allocator_base<_Tp>(__a) { }
      142:  160-block  0
call    0 returned 142
------------------
_ZNSaISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEEEC2ERKS6_:
function _ZNSaISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEEEC2ERKS6_ called 96 returned 100% blocks executed 100%
       96:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
       96:  160:      : __allocator_base<_Tp>(__a) { }
       96:  160-block  0
call    0 returned 96
------------------
_ZNSaISt6vectorIlSaIlEEEC2ERKS2_:
function _ZNSaISt6vectorIlSaIlEEEC2ERKS2_ called 211 returned 100% blocks executed 100%
      211:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
      211:  160:      : __allocator_base<_Tp>(__a) { }
      211:  160-block  0
call    0 returned 211
------------------
_ZNSaIlEC2ERKS_:
function _ZNSaIlEC2ERKS_ called 928 returned 100% blocks executed 100%
      928:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
      928:  160:      : __allocator_base<_Tp>(__a) { }
      928:  160-block  0
call    0 returned 928
------------------
_ZNSaINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC2ERKS5_:
function _ZNSaINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC2ERKS5_ called 438 returned 100% blocks executed 100%
      438:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
      438:  160:      : __allocator_base<_Tp>(__a) { }
      438:  160-block  0
call    0 returned 438
------------------
_ZNSaImEC2ERKS_:
function _ZNSaImEC2ERKS_ called 955 returned 100% blocks executed 100%
      955:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
      955:  160:      : __allocator_base<_Tp>(__a) { }
      955:  160-block  0
call    0 returned 955
------------------
_ZNSaISt13unordered_mapIlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS3_15SituationHasherESt8equal_toIS3_ESaIS3_EESt4hashIlES5_IlESaISt4pairIKlS8_EEEEC2ERKSH_:
function _ZNSaISt13unordered_mapIlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS3_15SituationHasherESt8equal_toIS3_ESaIS3_EESt4hashIlES5_IlESaISt4pairIKlS8_EEEEC2ERKSH_ called 334 returned 100% blocks executed 100%
      334:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
      334:  160:      : __allocator_base<_Tp>(__a) { }
      334:  160-block  0
call    0 returned 334
------------------
        -:  161:
        -:  162:#if __cplusplus >= 201103L
        -:  163:      // Avoid implicit deprecation.
        -:  164:      allocator& operator=(const allocator&) = default;
        -:  165:#endif
        -:  166:
        -:  167:      template<typename _Tp1>
        -:  168:	_GLIBCXX20_CONSTEXPR
   610400:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
------------------
_ZNSaIPlEC2IlEERKSaIT_E:
function _ZNSaIPlEC2IlEERKSaIT_E called 22 returned 100% blocks executed 100%
       22:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
       22:  169-block  0
call    0 returned 22
------------------
_ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKlSt6vectorISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEESaISE_EEELb0EEEEERKSaIT_E:
function _ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKlSt6vectorISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEESaISE_EEELb0EEEEERKSaIT_E called 28 returned 100% blocks executed 100%
       28:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
       28:  169-block  0
call    0 returned 28
------------------
_ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKlSt13unordered_setIN17BasicEarleyParserIwE9SituationENSA_15SituationHasherESt8equal_toISA_ESaISA_EEELb0EEEEERKSaIT_E:
function _ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKlSt13unordered_setIN17BasicEarleyParserIwE9SituationENSA_15SituationHasherESt8equal_toISA_ESaISA_EEELb0EEEEERKSaIT_E called 201778 returned 100% blocks executed 100%
   201778:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
   201778:  169-block  0
call    0 returned 201778
------------------
_ZNSaIPN17BasicEarleyParserIwE9SituationEEC2IS1_EERKSaIT_E:
function _ZNSaIPN17BasicEarleyParserIwE9SituationEEC2IS1_EERKSaIT_E called 668 returned 100% blocks executed 100%
      668:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
      668:  169-block  0
call    0 returned 668
------------------
_ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeIN17BasicEarleyParserIwE9SituationELb1EEEEERKSaIT_E:
function _ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeIN17BasicEarleyParserIwE9SituationELb1EEEEERKSaIT_E called 407482 returned 100% blocks executed 100%
   407482:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
   407482:  169-block  0
call    0 returned 407482
------------------
_ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeIlLb0EEEEERKSaIT_E:
function _ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeIlLb0EEEEERKSaIT_E called 244 returned 100% blocks executed 100%
      244:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
      244:  169-block  0
call    0 returned 244
------------------
_ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKlSt6vectorIS7_IlSaIlEESaIS9_EEELb0EEEEERKSaIT_E:
function _ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKlSt6vectorIS7_IlSaIlEESaIS9_EEELb0EEEEERKSaIT_E called 74 returned 100% blocks executed 100%
       74:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
       74:  169-block  0
call    0 returned 74
------------------
_ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEElELb1EEEEERKSaIT_E:
function _ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEElELb1EEEEERKSaIT_E called 52 returned 100% blocks executed 100%
       52:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
       52:  169-block  0
call    0 returned 52
------------------
_ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKlNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEELb0EEEEERKSaIT_E:
function _ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKlNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEELb0EEEEERKSaIT_E called 52 returned 100% blocks executed 100%
       52:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
       52:  169-block  0
call    0 returned 52
------------------
        -:  170:
        -:  171:#if __cpp_constexpr_dynamic_alloc
        -:  172:      constexpr
        -:  173:#endif
   821139:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIlED2Ev:
function _ZNSaIlED2Ev called 1230 returned 100% blocks executed 100%
     1230:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKlNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEELb0EEEED2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKlNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEELb0EEEED2Ev called 23 returned 100% blocks executed 100%
       23:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEElELb1EEEED2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEElELb1EEEED2Ev called 23 returned 100% blocks executed 100%
       23:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt6vectorIS3_IlSaIlEESaIS5_EEELb0EEEED2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt6vectorIS3_IlSaIlEESaIS5_EEELb0EEEED2Ev called 37 returned 100% blocks executed 100%
       37:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt8__detail10_Hash_nodeIlLb0EEEED2Ev:
function _ZNSaINSt8__detail10_Hash_nodeIlLb0EEEED2Ev called 270 returned 100% blocks executed 100%
      270:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaISt13unordered_mapIlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS3_15SituationHasherESt8equal_toIS3_ESaIS3_EESt4hashIlES5_IlESaISt4pairIKlS8_EEEED2Ev:
function _ZNSaISt13unordered_mapIlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS3_15SituationHasherESt8equal_toIS3_ESaIS3_EESt4hashIlES5_IlESaISt4pairIKlS8_EEEED2Ev called 501 returned 100% blocks executed 100%
      501:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt8__detail10_Hash_nodeIN17BasicEarleyParserIwE9SituationELb1EEEED2Ev:
function _ZNSaINSt8__detail10_Hash_nodeIN17BasicEarleyParserIwE9SituationELb1EEEED2Ev called 101592 returned 100% blocks executed 100%
   101592:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaImED2Ev:
function _ZNSaImED2Ev called 1690 returned 100% blocks executed 100%
     1690:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIN17BasicEarleyParserIwE9SituationEED2Ev:
function _ZNSaIN17BasicEarleyParserIwE9SituationEED2Ev called 334 returned 100% blocks executed 100%
      334:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIPlED2Ev:
function _ZNSaIPlED2Ev called 22 returned 100% blocks executed 100%
       22:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaISt6vectorIlSaIlEEED2Ev:
function _ZNSaISt6vectorIlSaIlEEED2Ev called 315 returned 100% blocks executed 100%
      315:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIPNSt8__detail15_Hash_node_baseEED2Ev:
function _ZNSaIPNSt8__detail15_Hash_node_baseEED2Ev called 612236 returned 100% blocks executed 100%
   612236:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIPN17BasicEarleyParserIwE9SituationEED2Ev:
function _ZNSaIPN17BasicEarleyParserIwE9SituationEED2Ev called 668 returned 100% blocks executed 100%
      668:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEED2Ev:
function _ZNSaINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEED2Ev called 713 returned 100% blocks executed 100%
      713:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS6_15SituationHasherESt8equal_toIS6_ESaIS6_EEELb0EEEED2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt13unordered_setIN17BasicEarleyParserIwE9SituationENS6_15SituationHasherESt8equal_toIS6_ESaIS6_EEELb0EEEED2Ev called 101327 returned 100% blocks executed 100%
   101327:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt6vectorISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEESaISA_EEELb0EEEED2Ev:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKlSt6vectorISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEESaISA_EEELb0EEEED2Ev called 14 returned 100% blocks executed 100%
       14:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEEED2Ev:
function _ZNSaISt13unordered_setIlSt4hashIlESt8equal_toIlESaIlEEED2Ev called 144 returned 100% blocks executed 100%
      144:  174:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
        -:  175:
        -:  176:#if __cplusplus > 201703L
        -:  177:      [[nodiscard,__gnu__::__always_inline__]]
        -:  178:      constexpr _Tp*
        -:  179:      allocate(size_t __n)
        -:  180:      {
        -:  181:#ifdef __cpp_lib_is_constant_evaluated
   968004:  182:	if (std::is_constant_evaluated())
       11:  182-block  0
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
       48:  182-block  1
call    3 returned 48
branch  4 taken 0 (fallthrough)
branch  5 taken 48
      288:  182-block  2
call    6 returned 288
branch  7 taken 0 (fallthrough)
branch  8 taken 288
       81:  182-block  3
call    9 returned 81
branch 10 taken 0 (fallthrough)
branch 11 taken 81
      216:  182-block  4
call   12 returned 216
branch 13 taken 0 (fallthrough)
branch 14 taken 216
      216:  182-block  5
call   15 returned 216
branch 16 taken 0 (fallthrough)
branch 17 taken 216
      124:  182-block  6
call   18 returned 124
branch 19 taken 0 (fallthrough)
branch 20 taken 124
      485:  182-block  7
call   21 returned 485
branch 22 taken 0 (fallthrough)
branch 23 taken 485
   306118:  182-block  8
call   24 returned 306118
branch 25 taken 0 (fallthrough)
branch 26 taken 306118
      248:  182-block  9
call   27 returned 248
branch 28 taken 0 (fallthrough)
branch 29 taken 248
      644:  182-block 10
call   30 returned 644
branch 31 taken 0 (fallthrough)
branch 32 taken 644
   555805:  182-block 11
call   33 returned 555805
branch 34 taken 0 (fallthrough)
branch 35 taken 555805
      757:  182-block 12
call   36 returned 757
branch 37 taken 0 (fallthrough)
branch 38 taken 757
      360:  182-block 13
call   39 returned 360
branch 40 taken 0 (fallthrough)
branch 41 taken 360
   101258:  182-block 14
call   42 returned 101258
branch 43 taken 0 (fallthrough)
branch 44 taken 101258
      334:  182-block 15
call   45 returned 334
branch 46 taken 0 (fallthrough)
branch 47 taken 334
      167:  182-block 16
call   48 returned 167
branch 49 taken 0 (fallthrough)
branch 50 taken 167
      530:  182-block 17
call   51 returned 530
branch 52 taken 0 (fallthrough)
branch 53 taken 530
      314:  182-block 18
call   54 returned 314
branch 55 taken 0 (fallthrough)
branch 56 taken 314
    #####:  183:	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  183-block  0
call    0 never executed
    %%%%%:  183-block  1
call    1 never executed
    %%%%%:  183-block  2
call    2 never executed
    %%%%%:  183-block  3
call    3 never executed
    %%%%%:  183-block  4
call    4 never executed
    %%%%%:  183-block  5
call    5 never executed
    %%%%%:  183-block  6
call    6 never executed
    %%%%%:  183-block  7
call    7 never executed
    %%%%%:  183-block  8
call    8 never executed
    %%%%%:  183-block  9
call    9 never executed
    %%%%%:  183-block 10
call   10 never executed
    %%%%%:  183-block 11
call   11 never executed
    %%%%%:  183-block 12
call   12 never executed
    %%%%%:  183-block 13
call   13 never executed
    %%%%%:  183-block 14
call   14 never executed
    %%%%%:  183-block 15
call   15 never executed
    %%%%%:  183-block 16
call   16 never executed
    %%%%%:  183-block 17
call   17 never executed
    %%%%%:  183-block 18
call   18 never executed
        -:  184:#endif
   968004:  185:	return __allocator_base<_Tp>::allocate(__n, 0);
       11:  185-block  0
call    0 returned 11
       48:  185-block  1
call    1 returned 48
      288:  185-block  2
call    2 returned 288
       81:  185-block  3
call    3 returned 81
      216:  185-block  4
call    4 returned 216
      216:  185-block  5
call    5 returned 216
      124:  185-block  6
call    6 returned 124
      485:  185-block  7
call    7 returned 485
   306118:  185-block  8
call    8 returned 306118
      248:  185-block  9
call    9 returned 248
      644:  185-block 10
call   10 returned 644
   555805:  185-block 11
call   11 returned 555805
      757:  185-block 12
call   12 returned 757
      360:  185-block 13
call   13 returned 360
   101258:  185-block 14
call   14 returned 101258
      334:  185-block 15
call   15 returned 334
      167:  185-block 16
call   16 returned 167
      530:  185-block 17
call   17 returned 530
      314:  185-block 18
call   18 returned 314
        -:  186:      }
        -:  187:
        -:  188:      [[__gnu__::__always_inline__]]
        -:  189:      constexpr void
        -:  190:      deallocate(_Tp* __p, size_t __n)
        -:  191:      {
        -:  192:#ifdef __cpp_lib_is_constant_evaluated
   968004:  193:	if (std::is_constant_evaluated())
       48:  193-block  0
call    0 returned 48
branch  1 taken 0 (fallthrough)
branch  2 taken 48
       11:  193-block  1
call    3 returned 11
branch  4 taken 0 (fallthrough)
branch  5 taken 11
       81:  193-block  2
call    6 returned 81
branch  7 taken 0 (fallthrough)
branch  8 taken 81
      248:  193-block  3
call    9 returned 248
branch 10 taken 0 (fallthrough)
branch 11 taken 248
      644:  193-block  4
call   12 returned 644
branch 13 taken 0 (fallthrough)
branch 14 taken 644
      485:  193-block  5
call   15 returned 485
branch 16 taken 0 (fallthrough)
branch 17 taken 485
   555805:  193-block  6
call   18 returned 555805
branch 19 taken 0 (fallthrough)
branch 20 taken 555805
   101258:  193-block  7
call   21 returned 101258
branch 22 taken 0 (fallthrough)
branch 23 taken 101258
      360:  193-block  8
call   24 returned 360
branch 25 taken 0 (fallthrough)
branch 26 taken 360
      288:  193-block  9
call   27 returned 288
branch 28 taken 0 (fallthrough)
branch 29 taken 288
      124:  193-block 10
call   30 returned 124
branch 31 taken 0 (fallthrough)
branch 32 taken 124
      216:  193-block 11
call   33 returned 216
branch 34 taken 0 (fallthrough)
branch 35 taken 216
      216:  193-block 12
call   36 returned 216
branch 37 taken 0 (fallthrough)
branch 38 taken 216
      334:  193-block 13
call   39 returned 334
branch 40 taken 0 (fallthrough)
branch 41 taken 334
      167:  193-block 14
call   42 returned 167
branch 43 taken 0 (fallthrough)
branch 44 taken 167
   306118:  193-block 15
call   45 returned 306118
branch 46 taken 0 (fallthrough)
branch 47 taken 306118
      757:  193-block 16
call   48 returned 757
branch 49 taken 0 (fallthrough)
branch 50 taken 757
      530:  193-block 17
call   51 returned 530
branch 52 taken 0 (fallthrough)
branch 53 taken 530
      314:  193-block 18
call   54 returned 314
branch 55 taken 0 (fallthrough)
branch 56 taken 314
        -:  194:	  {
    #####:  195:	    ::operator delete(__p);
    %%%%%:  195-block  0
call    0 never executed
    %%%%%:  195-block  1
call    1 never executed
    %%%%%:  195-block  2
call    2 never executed
    %%%%%:  195-block  3
call    3 never executed
    %%%%%:  195-block  4
call    4 never executed
    %%%%%:  195-block  5
call    5 never executed
    %%%%%:  195-block  6
call    6 never executed
    %%%%%:  195-block  7
call    7 never executed
    %%%%%:  195-block  8
call    8 never executed
    %%%%%:  195-block  9
call    9 never executed
    %%%%%:  195-block 10
call   10 never executed
    %%%%%:  195-block 11
call   11 never executed
    %%%%%:  195-block 12
call   12 never executed
    %%%%%:  195-block 13
call   13 never executed
    %%%%%:  195-block 14
call   14 never executed
    %%%%%:  195-block 15
call   15 never executed
    %%%%%:  195-block 16
call   16 never executed
    %%%%%:  195-block 17
call   17 never executed
    %%%%%:  195-block 18
call   18 never executed
    #####:  196:	    return;
        -:  197:	  }
        -:  198:#endif
   968004:  199:	__allocator_base<_Tp>::deallocate(__p, __n);
       48:  199-block  0
call    0 returned 48
       11:  199-block  1
call    1 returned 11
       81:  199-block  2
call    2 returned 81
      248:  199-block  3
call    3 returned 248
      644:  199-block  4
call    4 returned 644
      485:  199-block  5
call    5 returned 485
   555805:  199-block  6
call    6 returned 555805
   101258:  199-block  7
call    7 returned 101258
      360:  199-block  8
call    8 returned 360
      288:  199-block  9
call    9 returned 288
      124:  199-block 10
call   10 returned 124
      216:  199-block 11
call   11 returned 216
      216:  199-block 12
call   12 returned 216
      334:  199-block 13
call   13 returned 334
      167:  199-block 14
call   14 returned 167
   306118:  199-block 15
call   15 returned 306118
      757:  199-block 16
call   16 returned 757
      530:  199-block 17
call   17 returned 530
      314:  199-block 18
call   18 returned 314
        -:  200:      }
        -:  201:#endif // C++20
        -:  202:
        -:  203:      friend _GLIBCXX20_CONSTEXPR bool
function _ZSteqRKSaIwES1_ called 0 returned 0% blocks executed 0%
    #####:  204:      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
    #####:  205:      { return true; }
    %%%%%:  205-block  0
        -:  206:
        -:  207:#if __cpp_impl_three_way_comparison < 201907L
        -:  208:      friend _GLIBCXX20_CONSTEXPR bool
        -:  209:      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
        -:  210:      { return false; }
        -:  211:#endif
        -:  212:
        -:  213:      // Inherit everything else.
        -:  214:    };
        -:  215:
        -:  216:  template<typename _T1, typename _T2>
        -:  217:    inline _GLIBCXX20_CONSTEXPR bool
        -:  218:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  219:    _GLIBCXX_NOTHROW
        -:  220:    { return true; }
        -:  221:
        -:  222:#if __cpp_impl_three_way_comparison < 201907L
        -:  223:  template<typename _T1, typename _T2>
        -:  224:    inline _GLIBCXX20_CONSTEXPR bool
        -:  225:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  226:    _GLIBCXX_NOTHROW
        -:  227:    { return false; }
        -:  228:#endif
        -:  229:
        -:  230:  // Invalid allocator<cv T> partial specializations.
        -:  231:  // allocator_traits::rebind_alloc can be used to form a valid allocator type.
        -:  232:  template<typename _Tp>
        -:  233:    class allocator<const _Tp>
        -:  234:    {
        -:  235:    public:
        -:  236:      typedef _Tp value_type;
        -:  237:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  238:    };
        -:  239:
        -:  240:  template<typename _Tp>
        -:  241:    class allocator<volatile _Tp>
        -:  242:    {
        -:  243:    public:
        -:  244:      typedef _Tp value_type;
        -:  245:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  246:    };
        -:  247:
        -:  248:  template<typename _Tp>
        -:  249:    class allocator<const volatile _Tp>
        -:  250:    {
        -:  251:    public:
        -:  252:      typedef _Tp value_type;
        -:  253:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  254:    };
        -:  255:
        -:  256:  /// @} group allocator
        -:  257:
        -:  258:  // Inhibit implicit instantiations for required instantiations,
        -:  259:  // which are defined via explicit instantiations elsewhere.
        -:  260:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  261:  extern template class allocator<char>;
        -:  262:  extern template class allocator<wchar_t>;
        -:  263:#endif
        -:  264:
        -:  265:  // Undefine.
        -:  266:#undef __allocator_base
        -:  267:
        -:  268:  // To implement Option 3 of DR 431.
        -:  269:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  270:    struct __alloc_swap
        -:  271:    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };
        -:  272:
        -:  273:  template<typename _Alloc>
        -:  274:    struct __alloc_swap<_Alloc, false>
        -:  275:    {
        -:  276:      static void
        -:  277:      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT
        -:  278:      {
        -:  279:	// Precondition: swappable allocators.
        -:  280:	if (__one != __two)
        -:  281:	  swap(__one, __two);
        -:  282:      }
        -:  283:    };
        -:  284:
        -:  285:  // Optimize for stateless allocators.
        -:  286:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  287:    struct __alloc_neq
        -:  288:    {
        -:  289:      static bool
        -:  290:      _S_do_it(const _Alloc&, const _Alloc&)
        -:  291:      { return false; }
        -:  292:    };
        -:  293:
        -:  294:  template<typename _Alloc>
        -:  295:    struct __alloc_neq<_Alloc, false>
        -:  296:    {
        -:  297:      static bool
        -:  298:      _S_do_it(const _Alloc& __one, const _Alloc& __two)
        -:  299:      { return __one != __two; }
        -:  300:    };
        -:  301:
        -:  302:#if __cplusplus >= 201103L
        -:  303:  template<typename _Tp, bool
        -:  304:    = __or_<is_copy_constructible<typename _Tp::value_type>,
        -:  305:            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
        -:  306:    struct __shrink_to_fit_aux
        -:  307:    { static bool _S_do_it(_Tp&) noexcept { return false; } };
        -:  308:
        -:  309:  template<typename _Tp>
        -:  310:    struct __shrink_to_fit_aux<_Tp, true>
        -:  311:    {
        -:  312:      static bool
        -:  313:      _S_do_it(_Tp& __c) noexcept
        -:  314:      {
        -:  315:#if __cpp_exceptions
        -:  316:	try
        -:  317:	  {
        -:  318:	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
        -:  319:		__make_move_if_noexcept_iterator(__c.end()),
        -:  320:		__c.get_allocator()).swap(__c);
        -:  321:	    return true;
        -:  322:	  }
        -:  323:	catch(...)
        -:  324:	  { return false; }
        -:  325:#else
        -:  326:	return false;
        -:  327:#endif
        -:  328:      }
        -:  329:    };
        -:  330:#endif
        -:  331:
        -:  332:_GLIBCXX_END_NAMESPACE_VERSION
        -:  333:} // namespace std
        -:  334:
        -:  335:#endif
