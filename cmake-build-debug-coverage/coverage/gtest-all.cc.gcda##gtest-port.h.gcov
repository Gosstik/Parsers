        -:    0:Source:/home/ownstreamer/proga/C++/Parsers/GoogleTests/googletest/googletest/include/gtest/internal/gtest-port.h
        -:    0:Graph:/home/ownstreamer/proga/C++/Parsers/cmake-build-debug-coverage/GoogleTests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/ownstreamer/proga/C++/Parsers/cmake-build-debug-coverage/GoogleTests/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// Low-level types and utilities for porting Google Test to various
        -:   31:// platforms.  All macros ending with _ and symbols defined in an
        -:   32:// internal namespace are subject to change without notice.  Code
        -:   33:// outside Google Test MUST NOT USE THEM DIRECTLY.  Macros that don't
        -:   34:// end with _ are part of Google Test's public API and can be used by
        -:   35:// code outside Google Test.
        -:   36://
        -:   37:// This file is fundamental to Google Test.  All other Google Test source
        -:   38:// files are expected to #include this.  Therefore, it cannot #include
        -:   39:// any other Google Test header.
        -:   40:
        -:   41:// IWYU pragma: private, include "gtest/gtest.h"
        -:   42:// IWYU pragma: friend gtest/.*
        -:   43:// IWYU pragma: friend gmock/.*
        -:   44:
        -:   45:#ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   46:#define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   47:
        -:   48:// Environment-describing macros
        -:   49:// -----------------------------
        -:   50://
        -:   51:// Google Test can be used in many different environments.  Macros in
        -:   52:// this section tell Google Test what kind of environment it is being
        -:   53:// used in, such that Google Test can provide environment-specific
        -:   54:// features and implementations.
        -:   55://
        -:   56:// Google Test tries to automatically detect the properties of its
        -:   57:// environment, so users usually don't need to worry about these
        -:   58:// macros.  However, the automatic detection is not perfect.
        -:   59:// Sometimes it's necessary for a user to define some of the following
        -:   60:// macros in the build script to override Google Test's decisions.
        -:   61://
        -:   62:// If the user doesn't define a macro in the list, Google Test will
        -:   63:// provide a default definition.  After this header is #included, all
        -:   64:// macros in this list will be defined to either 1 or 0.
        -:   65://
        -:   66:// Notes to maintainers:
        -:   67://   - Each macro here is a user-tweakable knob; do not grow the list
        -:   68://     lightly.
        -:   69://   - Use #if to key off these macros.  Don't use #ifdef or "#if
        -:   70://     defined(...)", which will not work as these macros are ALWAYS
        -:   71://     defined.
        -:   72://
        -:   73://   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)
        -:   74://                              is/isn't available.
        -:   75://   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions
        -:   76://                              are enabled.
        -:   77://   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular
        -:   78://                              expressions are/aren't available.
        -:   79://   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>
        -:   80://                              is/isn't available.
        -:   81://   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't
        -:   82://                              enabled.
        -:   83://   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that
        -:   84://                              std::wstring does/doesn't work (Google Test can
        -:   85://                              be used where std::wstring is unavailable).
        -:   86://   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the
        -:   87://                              compiler supports Microsoft's "Structured
        -:   88://                              Exception Handling".
        -:   89://   GTEST_HAS_STREAM_REDIRECTION
        -:   90://                            - Define it to 1/0 to indicate whether the
        -:   91://                              platform supports I/O stream redirection using
        -:   92://                              dup() and dup2().
        -:   93://   GTEST_LINKED_AS_SHARED_LIBRARY
        -:   94://                            - Define to 1 when compiling tests that use
        -:   95://                              Google Test as a shared library (known as
        -:   96://                              DLL on Windows).
        -:   97://   GTEST_CREATE_SHARED_LIBRARY
        -:   98://                            - Define to 1 when compiling Google Test itself
        -:   99://                              as a shared library.
        -:  100://   GTEST_DEFAULT_DEATH_TEST_STYLE
        -:  101://                            - The default value of --gtest_death_test_style.
        -:  102://                              The legacy default has been "fast" in the open
        -:  103://                              source version since 2008. The recommended value
        -:  104://                              is "threadsafe", and can be set in
        -:  105://                              custom/gtest-port.h.
        -:  106:
        -:  107:// Platform-indicating macros
        -:  108:// --------------------------
        -:  109://
        -:  110:// Macros indicating the platform on which Google Test is being used
        -:  111:// (a macro is defined to 1 if compiled on the given platform;
        -:  112:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
        -:  113:// defines these macros automatically.  Code outside Google Test MUST
        -:  114:// NOT define them.
        -:  115://
        -:  116://   GTEST_OS_AIX      - IBM AIX
        -:  117://   GTEST_OS_CYGWIN   - Cygwin
        -:  118://   GTEST_OS_DRAGONFLY - DragonFlyBSD
        -:  119://   GTEST_OS_FREEBSD  - FreeBSD
        -:  120://   GTEST_OS_FUCHSIA  - Fuchsia
        -:  121://   GTEST_OS_GNU_HURD - GNU/Hurd
        -:  122://   GTEST_OS_GNU_KFREEBSD - GNU/kFreeBSD
        -:  123://   GTEST_OS_HAIKU    - Haiku
        -:  124://   GTEST_OS_HPUX     - HP-UX
        -:  125://   GTEST_OS_LINUX    - Linux
        -:  126://     GTEST_OS_LINUX_ANDROID - Google Android
        -:  127://   GTEST_OS_MAC      - Mac OS X
        -:  128://     GTEST_OS_IOS    - iOS
        -:  129://   GTEST_OS_NACL     - Google Native Client (NaCl)
        -:  130://   GTEST_OS_NETBSD   - NetBSD
        -:  131://   GTEST_OS_OPENBSD  - OpenBSD
        -:  132://   GTEST_OS_OS2      - OS/2
        -:  133://   GTEST_OS_QNX      - QNX
        -:  134://   GTEST_OS_SOLARIS  - Sun Solaris
        -:  135://   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)
        -:  136://     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop
        -:  137://     GTEST_OS_WINDOWS_MINGW    - MinGW
        -:  138://     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile
        -:  139://     GTEST_OS_WINDOWS_PHONE    - Windows Phone
        -:  140://     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT
        -:  141://   GTEST_OS_ZOS      - z/OS
        -:  142://
        -:  143:// Among the platforms, Cygwin, Linux, Mac OS X, and Windows have the
        -:  144:// most stable support.  Since core members of the Google Test project
        -:  145:// don't have access to other platforms, support for them may be less
        -:  146:// stable.  If you notice any problems on your platform, please notify
        -:  147:// googletestframework@googlegroups.com (patches for fixing them are
        -:  148:// even more welcome!).
        -:  149://
        -:  150:// It is possible that none of the GTEST_OS_* macros are defined.
        -:  151:
        -:  152:// Feature-indicating macros
        -:  153:// -------------------------
        -:  154://
        -:  155:// Macros indicating which Google Test features are available (a macro
        -:  156:// is defined to 1 if the corresponding feature is supported;
        -:  157:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
        -:  158:// defines these macros automatically.  Code outside Google Test MUST
        -:  159:// NOT define them.
        -:  160://
        -:  161:// These macros are public so that portable tests can be written.
        -:  162:// Such tests typically surround code using a feature with an #if
        -:  163:// which controls that code.  For example:
        -:  164://
        -:  165:// #if GTEST_HAS_DEATH_TEST
        -:  166://   EXPECT_DEATH(DoSomethingDeadly());
        -:  167:// #endif
        -:  168://
        -:  169://   GTEST_HAS_DEATH_TEST   - death tests
        -:  170://   GTEST_HAS_TYPED_TEST   - typed tests
        -:  171://   GTEST_HAS_TYPED_TEST_P - type-parameterized tests
        -:  172://   GTEST_IS_THREADSAFE    - Google Test is thread-safe.
        -:  173://   GTEST_USES_RE2         - the RE2 regular expression library is used
        -:  174://   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with
        -:  175://                            GTEST_HAS_POSIX_RE (see above) which users can
        -:  176://                            define themselves.
        -:  177://   GTEST_USES_SIMPLE_RE   - our own simple regex is used;
        -:  178://                            the above RE\b(s) are mutually exclusive.
        -:  179:
        -:  180:// Misc public macros
        -:  181:// ------------------
        -:  182://
        -:  183://   GTEST_FLAG(flag_name)  - references the variable corresponding to
        -:  184://                            the given Google Test flag.
        -:  185:
        -:  186:// Internal utilities
        -:  187:// ------------------
        -:  188://
        -:  189:// The following macros and utilities are for Google Test's INTERNAL
        -:  190:// use only.  Code outside Google Test MUST NOT USE THEM DIRECTLY.
        -:  191://
        -:  192:// Macros for basic C++ coding:
        -:  193://   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.
        -:  194://   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a
        -:  195://                              variable don't have to be used.
        -:  196://   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.
        -:  197://   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is
        -:  198://                                        suppressed (constant conditional).
        -:  199://   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127
        -:  200://                                        is suppressed.
        -:  201://   GTEST_INTERNAL_HAS_ANY - for enabling UniversalPrinter<std::any> or
        -:  202://                            UniversalPrinter<absl::any> specializations.
        -:  203://   GTEST_INTERNAL_HAS_OPTIONAL - for enabling UniversalPrinter<std::optional>
        -:  204://   or
        -:  205://                                 UniversalPrinter<absl::optional>
        -:  206://                                 specializations.
        -:  207://   GTEST_INTERNAL_HAS_STRING_VIEW - for enabling Matcher<std::string_view> or
        -:  208://                                    Matcher<absl::string_view>
        -:  209://                                    specializations.
        -:  210://   GTEST_INTERNAL_HAS_VARIANT - for enabling UniversalPrinter<std::variant> or
        -:  211://                                UniversalPrinter<absl::variant>
        -:  212://                                specializations.
        -:  213://
        -:  214:// Synchronization:
        -:  215://   Mutex, MutexLock, ThreadLocal, GetThreadCount()
        -:  216://                            - synchronization primitives.
        -:  217://
        -:  218:// Regular expressions:
        -:  219://   RE             - a simple regular expression class using
        -:  220://                     1) the RE2 syntax on all platforms when built with RE2
        -:  221://                        and Abseil as dependencies
        -:  222://                     2) the POSIX Extended Regular Expression syntax on
        -:  223://                        UNIX-like platforms,
        -:  224://                     3) A reduced regular exception syntax on other platforms,
        -:  225://                        including Windows.
        -:  226:// Logging:
        -:  227://   GTEST_LOG_()   - logs messages at the specified severity level.
        -:  228://   LogToStderr()  - directs all log messages to stderr.
        -:  229://   FlushInfoLog() - flushes informational log messages.
        -:  230://
        -:  231:// Stdout and stderr capturing:
        -:  232://   CaptureStdout()     - starts capturing stdout.
        -:  233://   GetCapturedStdout() - stops capturing stdout and returns the captured
        -:  234://                         string.
        -:  235://   CaptureStderr()     - starts capturing stderr.
        -:  236://   GetCapturedStderr() - stops capturing stderr and returns the captured
        -:  237://                         string.
        -:  238://
        -:  239:// Integer types:
        -:  240://   TypeWithSize   - maps an integer to a int type.
        -:  241://   TimeInMillis   - integers of known sizes.
        -:  242://   BiggestInt     - the biggest signed integer type.
        -:  243://
        -:  244:// Command-line utilities:
        -:  245://   GetInjectableArgvs() - returns the command line as a vector of strings.
        -:  246://
        -:  247:// Environment variable utilities:
        -:  248://   GetEnv()             - gets the value of an environment variable.
        -:  249://   BoolFromGTestEnv()   - parses a bool environment variable.
        -:  250://   Int32FromGTestEnv()  - parses an int32_t environment variable.
        -:  251://   StringFromGTestEnv() - parses a string environment variable.
        -:  252://
        -:  253:// Deprecation warnings:
        -:  254://   GTEST_INTERNAL_DEPRECATED(message) - attribute marking a function as
        -:  255://                                        deprecated; calling a marked function
        -:  256://                                        should generate a compiler warning
        -:  257:
        -:  258:#include <ctype.h>   // for isspace, etc
        -:  259:#include <stddef.h>  // for ptrdiff_t
        -:  260:#include <stdio.h>
        -:  261:#include <stdlib.h>
        -:  262:#include <string.h>
        -:  263:
        -:  264:#include <cerrno>
        -:  265:// #include <condition_variable>  // Guarded by GTEST_IS_THREADSAFE below
        -:  266:#include <cstdint>
        -:  267:#include <iostream>
        -:  268:#include <limits>
        -:  269:#include <locale>
        -:  270:#include <memory>
        -:  271:#include <string>
        -:  272:// #include <mutex>  // Guarded by GTEST_IS_THREADSAFE below
        -:  273:#include <tuple>
        -:  274:#include <type_traits>
        -:  275:#include <vector>
        -:  276:
        -:  277:#ifndef _WIN32_WCE
        -:  278:#include <sys/stat.h>
        -:  279:#include <sys/types.h>
        -:  280:#endif  // !_WIN32_WCE
        -:  281:
        -:  282:#if defined __APPLE__
        -:  283:#include <AvailabilityMacros.h>
        -:  284:#include <TargetConditionals.h>
        -:  285:#endif
        -:  286:
        -:  287:#include "gtest/internal/custom/gtest-port.h"
        -:  288:#include "gtest/internal/gtest-port-arch.h"
        -:  289:
        -:  290:#if GTEST_HAS_ABSL
        -:  291:#include "absl/flags/declare.h"
        -:  292:#include "absl/flags/flag.h"
        -:  293:#include "absl/flags/reflection.h"
        -:  294:#endif
        -:  295:
        -:  296:#if !defined(GTEST_DEV_EMAIL_)
        -:  297:#define GTEST_DEV_EMAIL_ "googletestframework@@googlegroups.com"
        -:  298:#define GTEST_FLAG_PREFIX_ "gtest_"
        -:  299:#define GTEST_FLAG_PREFIX_DASH_ "gtest-"
        -:  300:#define GTEST_FLAG_PREFIX_UPPER_ "GTEST_"
        -:  301:#define GTEST_NAME_ "Google Test"
        -:  302:#define GTEST_PROJECT_URL_ "https://github.com/google/googletest/"
        -:  303:#endif  // !defined(GTEST_DEV_EMAIL_)
        -:  304:
        -:  305:#if !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
        -:  306:#define GTEST_INIT_GOOGLE_TEST_NAME_ "testing::InitGoogleTest"
        -:  307:#endif  // !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
        -:  308:
        -:  309:// Determines the version of gcc that is used to compile this.
        -:  310:#ifdef __GNUC__
        -:  311:// 40302 means version 4.3.2.
        -:  312:#define GTEST_GCC_VER_ \
        -:  313:  (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
        -:  314:#endif  // __GNUC__
        -:  315:
        -:  316:// Macros for disabling Microsoft Visual C++ warnings.
        -:  317://
        -:  318://   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 4385)
        -:  319://   /* code that triggers warnings C4800 and C4385 */
        -:  320://   GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  321:#if defined(_MSC_VER)
        -:  322:#define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings) \
        -:  323:  __pragma(warning(push)) __pragma(warning(disable : warnings))
        -:  324:#define GTEST_DISABLE_MSC_WARNINGS_POP_() __pragma(warning(pop))
        -:  325:#else
        -:  326:// Not all compilers are MSVC
        -:  327:#define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)
        -:  328:#define GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  329:#endif
        -:  330:
        -:  331:// Clang on Windows does not understand MSVC's pragma warning.
        -:  332:// We need clang-specific way to disable function deprecation warning.
        -:  333:#ifdef __clang__
        -:  334:#define GTEST_DISABLE_MSC_DEPRECATED_PUSH_()                            \
        -:  335:  _Pragma("clang diagnostic push")                                      \
        -:  336:      _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"") \
        -:  337:          _Pragma("clang diagnostic ignored \"-Wdeprecated-implementations\"")
        -:  338:#define GTEST_DISABLE_MSC_DEPRECATED_POP_() _Pragma("clang diagnostic pop")
        -:  339:#else
        -:  340:#define GTEST_DISABLE_MSC_DEPRECATED_PUSH_() \
        -:  341:  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)
        -:  342:#define GTEST_DISABLE_MSC_DEPRECATED_POP_() GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  343:#endif
        -:  344:
        -:  345:// Brings in definitions for functions used in the testing::internal::posix
        -:  346:// namespace (read, write, close, chdir, isatty, stat). We do not currently
        -:  347:// use them on Windows Mobile.
        -:  348:#if GTEST_OS_WINDOWS
        -:  349:#if !GTEST_OS_WINDOWS_MOBILE
        -:  350:#include <direct.h>
        -:  351:#include <io.h>
        -:  352:#endif
        -:  353:// In order to avoid having to include <windows.h>, use forward declaration
        -:  354:#if GTEST_OS_WINDOWS_MINGW && !defined(__MINGW64_VERSION_MAJOR)
        -:  355:// MinGW defined _CRITICAL_SECTION and _RTL_CRITICAL_SECTION as two
        -:  356:// separate (equivalent) structs, instead of using typedef
        -:  357:typedef struct _CRITICAL_SECTION GTEST_CRITICAL_SECTION;
        -:  358:#else
        -:  359:// Assume CRITICAL_SECTION is a typedef of _RTL_CRITICAL_SECTION.
        -:  360:// This assumption is verified by
        -:  361:// WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.
        -:  362:typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;
        -:  363:#endif
        -:  364:#elif GTEST_OS_XTENSA
        -:  365:#include <unistd.h>
        -:  366:// Xtensa toolchains define strcasecmp in the string.h header instead of
        -:  367:// strings.h. string.h is already included.
        -:  368:#else
        -:  369:// This assumes that non-Windows OSes provide unistd.h. For OSes where this
        -:  370:// is not the case, we need to include headers that provide the functions
        -:  371:// mentioned above.
        -:  372:#include <strings.h>
        -:  373:#include <unistd.h>
        -:  374:#endif  // GTEST_OS_WINDOWS
        -:  375:
        -:  376:#if GTEST_OS_LINUX_ANDROID
        -:  377:// Used to define __ANDROID_API__ matching the target NDK API level.
        -:  378:#include <android/api-level.h>  // NOLINT
        -:  379:#endif
        -:  380:
        -:  381:// Defines this to true if and only if Google Test can use POSIX regular
        -:  382:// expressions.
        -:  383:#ifndef GTEST_HAS_POSIX_RE
        -:  384:#if GTEST_OS_LINUX_ANDROID
        -:  385:// On Android, <regex.h> is only available starting with Gingerbread.
        -:  386:#define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)
        -:  387:#else
        -:  388:#define GTEST_HAS_POSIX_RE \
        -:  389:  !(GTEST_OS_WINDOWS || GTEST_OS_XTENSA || GTEST_OS_QURT)
        -:  390:#endif
        -:  391:#endif
        -:  392:
        -:  393:// Select the regular expression implementation.
        -:  394:#if GTEST_HAS_ABSL
        -:  395:// When using Abseil, RE2 is required.
        -:  396:#include "absl/strings/string_view.h"
        -:  397:#include "re2/re2.h"
        -:  398:#define GTEST_USES_RE2 1
        -:  399:#elif GTEST_HAS_POSIX_RE
        -:  400:#include <regex.h>  // NOLINT
        -:  401:#define GTEST_USES_POSIX_RE 1
        -:  402:#else
        -:  403:// Use our own simple regex implementation.
        -:  404:#define GTEST_USES_SIMPLE_RE 1
        -:  405:#endif
        -:  406:
        -:  407:#ifndef GTEST_HAS_EXCEPTIONS
        -:  408:// The user didn't tell us whether exceptions are enabled, so we need
        -:  409:// to figure it out.
        -:  410:#if defined(_MSC_VER) && defined(_CPPUNWIND)
        -:  411:// MSVC defines _CPPUNWIND to 1 if and only if exceptions are enabled.
        -:  412:#define GTEST_HAS_EXCEPTIONS 1
        -:  413:#elif defined(__BORLANDC__)
        -:  414:// C++Builder's implementation of the STL uses the _HAS_EXCEPTIONS
        -:  415:// macro to enable exceptions, so we'll do the same.
        -:  416:// Assumes that exceptions are enabled by default.
        -:  417:#ifndef _HAS_EXCEPTIONS
        -:  418:#define _HAS_EXCEPTIONS 1
        -:  419:#endif  // _HAS_EXCEPTIONS
        -:  420:#define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS
        -:  421:#elif defined(__clang__)
        -:  422:// clang defines __EXCEPTIONS if and only if exceptions are enabled before clang
        -:  423:// 220714, but if and only if cleanups are enabled after that. In Obj-C++ files,
        -:  424:// there can be cleanups for ObjC exceptions which also need cleanups, even if
        -:  425:// C++ exceptions are disabled. clang has __has_feature(cxx_exceptions) which
        -:  426:// checks for C++ exceptions starting at clang r206352, but which checked for
        -:  427:// cleanups prior to that. To reliably check for C++ exception availability with
        -:  428:// clang, check for
        -:  429:// __EXCEPTIONS && __has_feature(cxx_exceptions).
        -:  430:#define GTEST_HAS_EXCEPTIONS (__EXCEPTIONS && __has_feature(cxx_exceptions))
        -:  431:#elif defined(__GNUC__) && __EXCEPTIONS
        -:  432:// gcc defines __EXCEPTIONS to 1 if and only if exceptions are enabled.
        -:  433:#define GTEST_HAS_EXCEPTIONS 1
        -:  434:#elif defined(__SUNPRO_CC)
        -:  435:// Sun Pro CC supports exceptions.  However, there is no compile-time way of
        -:  436:// detecting whether they are enabled or not.  Therefore, we assume that
        -:  437:// they are enabled unless the user tells us otherwise.
        -:  438:#define GTEST_HAS_EXCEPTIONS 1
        -:  439:#elif defined(__IBMCPP__) && __EXCEPTIONS
        -:  440:// xlC defines __EXCEPTIONS to 1 if and only if exceptions are enabled.
        -:  441:#define GTEST_HAS_EXCEPTIONS 1
        -:  442:#elif defined(__HP_aCC)
        -:  443:// Exception handling is in effect by default in HP aCC compiler. It has to
        -:  444:// be turned of by +noeh compiler option if desired.
        -:  445:#define GTEST_HAS_EXCEPTIONS 1
        -:  446:#else
        -:  447:// For other compilers, we assume exceptions are disabled to be
        -:  448:// conservative.
        -:  449:#define GTEST_HAS_EXCEPTIONS 0
        -:  450:#endif  // defined(_MSC_VER) || defined(__BORLANDC__)
        -:  451:#endif  // GTEST_HAS_EXCEPTIONS
        -:  452:
        -:  453:#ifndef GTEST_HAS_STD_WSTRING
        -:  454:// The user didn't tell us whether ::std::wstring is available, so we need
        -:  455:// to figure it out.
        -:  456:// Cygwin 1.7 and below doesn't support ::std::wstring.
        -:  457:// Solaris' libc++ doesn't support it either.  Android has
        -:  458:// no support for it at least as recent as Froyo (2.2).
        -:  459:#define GTEST_HAS_STD_WSTRING                                         \
        -:  460:  (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS || \
        -:  461:     GTEST_OS_HAIKU || GTEST_OS_ESP32 || GTEST_OS_ESP8266 ||          \
        -:  462:     GTEST_OS_XTENSA || GTEST_OS_QURT))
        -:  463:
        -:  464:#endif  // GTEST_HAS_STD_WSTRING
        -:  465:
        -:  466:// Determines whether RTTI is available.
        -:  467:#ifndef GTEST_HAS_RTTI
        -:  468:// The user didn't tell us whether RTTI is enabled, so we need to
        -:  469:// figure it out.
        -:  470:
        -:  471:#ifdef _MSC_VER
        -:  472:
        -:  473:#ifdef _CPPRTTI  // MSVC defines this macro if and only if RTTI is enabled.
        -:  474:#define GTEST_HAS_RTTI 1
        -:  475:#else
        -:  476:#define GTEST_HAS_RTTI 0
        -:  477:#endif
        -:  478:
        -:  479:// Starting with version 4.3.2, gcc defines __GXX_RTTI if and only if RTTI is
        -:  480:// enabled.
        -:  481:#elif defined(__GNUC__)
        -:  482:
        -:  483:#ifdef __GXX_RTTI
        -:  484:// When building against STLport with the Android NDK and with
        -:  485:// -frtti -fno-exceptions, the build fails at link time with undefined
        -:  486:// references to __cxa_bad_typeid. Note sure if STL or toolchain bug,
        -:  487:// so disable RTTI when detected.
        -:  488:#if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && !defined(__EXCEPTIONS)
        -:  489:#define GTEST_HAS_RTTI 0
        -:  490:#else
        -:  491:#define GTEST_HAS_RTTI 1
        -:  492:#endif  // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS
        -:  493:#else
        -:  494:#define GTEST_HAS_RTTI 0
        -:  495:#endif  // __GXX_RTTI
        -:  496:
        -:  497:// Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends
        -:  498:// using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the
        -:  499:// first version with C++ support.
        -:  500:#elif defined(__clang__)
        -:  501:
        -:  502:#define GTEST_HAS_RTTI __has_feature(cxx_rtti)
        -:  503:
        -:  504:// Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if
        -:  505:// both the typeid and dynamic_cast features are present.
        -:  506:#elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)
        -:  507:
        -:  508:#ifdef __RTTI_ALL__
        -:  509:#define GTEST_HAS_RTTI 1
        -:  510:#else
        -:  511:#define GTEST_HAS_RTTI 0
        -:  512:#endif
        -:  513:
        -:  514:#else
        -:  515:
        -:  516:// For all other compilers, we assume RTTI is enabled.
        -:  517:#define GTEST_HAS_RTTI 1
        -:  518:
        -:  519:#endif  // _MSC_VER
        -:  520:
        -:  521:#endif  // GTEST_HAS_RTTI
        -:  522:
        -:  523:// It's this header's responsibility to #include <typeinfo> when RTTI
        -:  524:// is enabled.
        -:  525:#if GTEST_HAS_RTTI
        -:  526:#include <typeinfo>
        -:  527:#endif
        -:  528:
        -:  529:// Determines whether Google Test can use the pthreads library.
        -:  530:#ifndef GTEST_HAS_PTHREAD
        -:  531:// The user didn't tell us explicitly, so we make reasonable assumptions about
        -:  532:// which platforms have pthreads support.
        -:  533://
        -:  534:// To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
        -:  535:// to your compiler flags.
        -:  536:#define GTEST_HAS_PTHREAD                                                      \
        -:  537:  (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX || GTEST_OS_QNX ||          \
        -:  538:   GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA || \
        -:  539:   GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_OPENBSD ||          \
        -:  540:   GTEST_OS_HAIKU || GTEST_OS_GNU_HURD)
        -:  541:#endif  // GTEST_HAS_PTHREAD
        -:  542:
        -:  543:#if GTEST_HAS_PTHREAD
        -:  544:// gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is
        -:  545:// true.
        -:  546:#include <pthread.h>  // NOLINT
        -:  547:
        -:  548:// For timespec and nanosleep, used below.
        -:  549:#include <time.h>  // NOLINT
        -:  550:#endif
        -:  551:
        -:  552:// Determines whether clone(2) is supported.
        -:  553:// Usually it will only be available on Linux, excluding
        -:  554:// Linux on the Itanium architecture.
        -:  555:// Also see http://linux.die.net/man/2/clone.
        -:  556:#ifndef GTEST_HAS_CLONE
        -:  557:// The user didn't tell us, so we need to figure it out.
        -:  558:
        -:  559:#if GTEST_OS_LINUX && !defined(__ia64__)
        -:  560:#if GTEST_OS_LINUX_ANDROID
        -:  561:// On Android, clone() became available at different API levels for each 32-bit
        -:  562:// architecture.
        -:  563:#if defined(__LP64__) || (defined(__arm__) && __ANDROID_API__ >= 9) || \
        -:  564:    (defined(__mips__) && __ANDROID_API__ >= 12) ||                    \
        -:  565:    (defined(__i386__) && __ANDROID_API__ >= 17)
        -:  566:#define GTEST_HAS_CLONE 1
        -:  567:#else
        -:  568:#define GTEST_HAS_CLONE 0
        -:  569:#endif
        -:  570:#else
        -:  571:#define GTEST_HAS_CLONE 1
        -:  572:#endif
        -:  573:#else
        -:  574:#define GTEST_HAS_CLONE 0
        -:  575:#endif  // GTEST_OS_LINUX && !defined(__ia64__)
        -:  576:
        -:  577:#endif  // GTEST_HAS_CLONE
        -:  578:
        -:  579:// Determines whether to support stream redirection. This is used to test
        -:  580:// output correctness and to implement death tests.
        -:  581:#ifndef GTEST_HAS_STREAM_REDIRECTION
        -:  582:// By default, we assume that stream redirection is supported on all
        -:  583:// platforms except known mobile / embedded ones.
        -:  584:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE ||          \
        -:  585:    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266 || GTEST_OS_XTENSA || \
        -:  586:    GTEST_OS_QURT
        -:  587:#define GTEST_HAS_STREAM_REDIRECTION 0
        -:  588:#else
        -:  589:#define GTEST_HAS_STREAM_REDIRECTION 1
        -:  590:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -:  591:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -:  592:
        -:  593:// Determines whether to support death tests.
        -:  594:// pops up a dialog window that cannot be suppressed programmatically.
        -:  595:#if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS ||             \
        -:  596:     (GTEST_OS_MAC && !GTEST_OS_IOS) ||                                   \
        -:  597:     (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER) || GTEST_OS_WINDOWS_MINGW ||  \
        -:  598:     GTEST_OS_AIX || GTEST_OS_HPUX || GTEST_OS_OPENBSD || GTEST_OS_QNX || \
        -:  599:     GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA ||           \
        -:  600:     GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_HAIKU ||     \
        -:  601:     GTEST_OS_GNU_HURD)
        -:  602:#define GTEST_HAS_DEATH_TEST 1
        -:  603:#endif
        -:  604:
        -:  605:// Determines whether to support type-driven tests.
        -:  606:
        -:  607:// Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,
        -:  608:// Sun Pro CC, IBM Visual Age, and HP aCC support.
        -:  609:#if defined(__GNUC__) || defined(_MSC_VER) || defined(__SUNPRO_CC) || \
        -:  610:    defined(__IBMCPP__) || defined(__HP_aCC)
        -:  611:#define GTEST_HAS_TYPED_TEST 1
        -:  612:#define GTEST_HAS_TYPED_TEST_P 1
        -:  613:#endif
        -:  614:
        -:  615:// Determines whether the system compiler uses UTF-16 for encoding wide strings.
        -:  616:#define GTEST_WIDE_STRING_USES_UTF16_ \
        -:  617:  (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_AIX || GTEST_OS_OS2)
        -:  618:
        -:  619:// Determines whether test results can be streamed to a socket.
        -:  620:#if GTEST_OS_LINUX || GTEST_OS_GNU_KFREEBSD || GTEST_OS_DRAGONFLY || \
        -:  621:    GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_OPENBSD ||       \
        -:  622:    GTEST_OS_GNU_HURD
        -:  623:#define GTEST_CAN_STREAM_RESULTS_ 1
        -:  624:#endif
        -:  625:
        -:  626:// Defines some utility macros.
        -:  627:
        -:  628:// The GNU compiler emits a warning if nested "if" statements are followed by
        -:  629:// an "else" statement and braces are not used to explicitly disambiguate the
        -:  630:// "else" binding.  This leads to problems with code like:
        -:  631://
        -:  632://   if (gate)
        -:  633://     ASSERT_*(condition) << "Some message";
        -:  634://
        -:  635:// The "switch (0) case 0:" idiom is used to suppress this.
        -:  636:#ifdef __INTEL_COMPILER
        -:  637:#define GTEST_AMBIGUOUS_ELSE_BLOCKER_
        -:  638:#else
        -:  639:#define GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -:  640:  switch (0)                          \
        -:  641:  case 0:                             \
        -:  642:  default:  // NOLINT
        -:  643:#endif
        -:  644:
        -:  645:// GTEST_HAVE_ATTRIBUTE_
        -:  646://
        -:  647:// A function-like feature checking macro that is a wrapper around
        -:  648:// `__has_attribute`, which is defined by GCC 5+ and Clang and evaluates to a
        -:  649:// nonzero constant integer if the attribute is supported or 0 if not.
        -:  650://
        -:  651:// It evaluates to zero if `__has_attribute` is not defined by the compiler.
        -:  652://
        -:  653:// GCC: https://gcc.gnu.org/gcc-5/changes.html
        -:  654:// Clang: https://clang.llvm.org/docs/LanguageExtensions.html
        -:  655:#ifdef __has_attribute
        -:  656:#define GTEST_HAVE_ATTRIBUTE_(x) __has_attribute(x)
        -:  657:#else
        -:  658:#define GTEST_HAVE_ATTRIBUTE_(x) 0
        -:  659:#endif
        -:  660:
        -:  661:// GTEST_HAVE_FEATURE_
        -:  662://
        -:  663:// A function-like feature checking macro that is a wrapper around
        -:  664:// `__has_feature`.
        -:  665:#ifdef __has_feature
        -:  666:#define GTEST_HAVE_FEATURE_(x) __has_feature(x)
        -:  667:#else
        -:  668:#define GTEST_HAVE_FEATURE_(x) 0
        -:  669:#endif
        -:  670:
        -:  671:// Use this annotation after a variable or parameter declaration to tell the
        -:  672:// compiler the variable/parameter does not have to be used.
        -:  673:// Example:
        -:  674://
        -:  675://   GTEST_ATTRIBUTE_UNUSED_ int foo = bar();
        -:  676:#if GTEST_HAVE_ATTRIBUTE_(unused)
        -:  677:#define GTEST_ATTRIBUTE_UNUSED_ __attribute__((unused))
        -:  678:#else
        -:  679:#define GTEST_ATTRIBUTE_UNUSED_
        -:  680:#endif
        -:  681:
        -:  682:// Use this annotation before a function that takes a printf format string.
        -:  683:#if GTEST_HAVE_ATTRIBUTE_(format) && defined(__MINGW_PRINTF_FORMAT)
        -:  684:// MinGW has two different printf implementations. Ensure the format macro
        -:  685:// matches the selected implementation. See
        -:  686:// https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/.
        -:  687:#define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \
        -:  688:  __attribute__((format(__MINGW_PRINTF_FORMAT, string_index, first_to_check)))
        -:  689:#elif GTEST_HAVE_ATTRIBUTE_(format)
        -:  690:#define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check)   \
        -:  691:  __attribute__((format(printf, string_index, first_to_check)))
        -:  692:#else
        -:  693:#define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check)
        -:  694:#endif
        -:  695:
        -:  696:// Tell the compiler to warn about unused return values for functions declared
        -:  697:// with this macro.  The macro should be used on function declarations
        -:  698:// following the argument list:
        -:  699://
        -:  700://   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;
        -:  701:#if GTEST_HAVE_ATTRIBUTE_(warn_unused_result)
        -:  702:#define GTEST_MUST_USE_RESULT_ __attribute__((warn_unused_result))
        -:  703:#else
        -:  704:#define GTEST_MUST_USE_RESULT_
        -:  705:#endif
        -:  706:
        -:  707:// MS C++ compiler emits warning when a conditional expression is compile time
        -:  708:// constant. In some contexts this warning is false positive and needs to be
        -:  709:// suppressed. Use the following two macros in such cases:
        -:  710://
        -:  711:// GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -:  712:// while (true) {
        -:  713:// GTEST_INTENTIONAL_CONST_COND_POP_()
        -:  714:// }
        -:  715:#define GTEST_INTENTIONAL_CONST_COND_PUSH_() \
        -:  716:  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)
        -:  717:#define GTEST_INTENTIONAL_CONST_COND_POP_() GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  718:
        -:  719:// Determine whether the compiler supports Microsoft's Structured Exception
        -:  720:// Handling.  This is supported by several Windows compilers but generally
        -:  721:// does not exist on any other system.
        -:  722:#ifndef GTEST_HAS_SEH
        -:  723:// The user didn't tell us, so we need to figure it out.
        -:  724:
        -:  725:#if defined(_MSC_VER) || defined(__BORLANDC__)
        -:  726:// These two compilers are known to support SEH.
        -:  727:#define GTEST_HAS_SEH 1
        -:  728:#else
        -:  729:// Assume no SEH.
        -:  730:#define GTEST_HAS_SEH 0
        -:  731:#endif
        -:  732:
        -:  733:#endif  // GTEST_HAS_SEH
        -:  734:
        -:  735:#ifndef GTEST_IS_THREADSAFE
        -:  736:
        -:  737:#define GTEST_IS_THREADSAFE                                                 \
        -:  738:  (GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ ||                                     \
        -:  739:   (GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT) || \
        -:  740:   GTEST_HAS_PTHREAD)
        -:  741:
        -:  742:#endif  // GTEST_IS_THREADSAFE
        -:  743:
        -:  744:#if GTEST_IS_THREADSAFE
        -:  745:// Some platforms don't support including these threading related headers.
        -:  746:#include <condition_variable>  // NOLINT
        -:  747:#include <mutex>               // NOLINT
        -:  748:#endif                         // GTEST_IS_THREADSAFE
        -:  749:
        -:  750:// GTEST_API_ qualifies all symbols that must be exported. The definitions below
        -:  751:// are guarded by #ifndef to give embedders a chance to define GTEST_API_ in
        -:  752:// gtest/internal/custom/gtest-port.h
        -:  753:#ifndef GTEST_API_
        -:  754:
        -:  755:#ifdef _MSC_VER
        -:  756:#if GTEST_LINKED_AS_SHARED_LIBRARY
        -:  757:#define GTEST_API_ __declspec(dllimport)
        -:  758:#elif GTEST_CREATE_SHARED_LIBRARY
        -:  759:#define GTEST_API_ __declspec(dllexport)
        -:  760:#endif
        -:  761:#elif GTEST_HAVE_ATTRIBUTE_(visibility)
        -:  762:#define GTEST_API_ __attribute__((visibility("default")))
        -:  763:#endif  // _MSC_VER
        -:  764:
        -:  765:#endif  // GTEST_API_
        -:  766:
        -:  767:#ifndef GTEST_API_
        -:  768:#define GTEST_API_
        -:  769:#endif  // GTEST_API_
        -:  770:
        -:  771:#ifndef GTEST_DEFAULT_DEATH_TEST_STYLE
        -:  772:#define GTEST_DEFAULT_DEATH_TEST_STYLE "fast"
        -:  773:#endif  // GTEST_DEFAULT_DEATH_TEST_STYLE
        -:  774:
        -:  775:#if GTEST_HAVE_ATTRIBUTE_(noinline)
        -:  776:// Ask the compiler to never inline a given function.
        -:  777:#define GTEST_NO_INLINE_ __attribute__((noinline))
        -:  778:#else
        -:  779:#define GTEST_NO_INLINE_
        -:  780:#endif
        -:  781:
        -:  782:#if GTEST_HAVE_ATTRIBUTE_(disable_tail_calls)
        -:  783:// Ask the compiler not to perform tail call optimization inside
        -:  784:// the marked function.
        -:  785:#define GTEST_NO_TAIL_CALL_ __attribute__((disable_tail_calls))
        -:  786:#elif __GNUC__
        -:  787:#define GTEST_NO_TAIL_CALL_ \
        -:  788:  __attribute__((optimize("no-optimize-sibling-calls")))
        -:  789:#else
        -:  790:#define GTEST_NO_TAIL_CALL_
        -:  791:#endif
        -:  792:
        -:  793:// _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.
        -:  794:#if !defined(GTEST_HAS_CXXABI_H_)
        -:  795:#if defined(__GLIBCXX__) || (defined(_LIBCPP_VERSION) && !defined(_MSC_VER))
        -:  796:#define GTEST_HAS_CXXABI_H_ 1
        -:  797:#else
        -:  798:#define GTEST_HAS_CXXABI_H_ 0
        -:  799:#endif
        -:  800:#endif
        -:  801:
        -:  802:// A function level attribute to disable checking for use of uninitialized
        -:  803:// memory when built with MemorySanitizer.
        -:  804:#if GTEST_HAVE_ATTRIBUTE_(no_sanitize_memory)
        -:  805:#define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ __attribute__((no_sanitize_memory))
        -:  806:#else
        -:  807:#define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  808:#endif
        -:  809:
        -:  810:// A function level attribute to disable AddressSanitizer instrumentation.
        -:  811:#if GTEST_HAVE_ATTRIBUTE_(no_sanitize_address)
        -:  812:#define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ \
        -:  813:  __attribute__((no_sanitize_address))
        -:  814:#else
        -:  815:#define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  816:#endif
        -:  817:
        -:  818:// A function level attribute to disable HWAddressSanitizer instrumentation.
        -:  819:#if GTEST_HAVE_FEATURE_(hwaddress_sanitizer) && \
        -:  820:    GTEST_HAVE_ATTRIBUTE_(no_sanitize)
        -:  821:#define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ \
        -:  822:  __attribute__((no_sanitize("hwaddress")))
        -:  823:#else
        -:  824:#define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_
        -:  825:#endif
        -:  826:
        -:  827:// A function level attribute to disable ThreadSanitizer instrumentation.
        -:  828:#if GTEST_HAVE_ATTRIBUTE_(no_sanitize_thread)
        -:  829:#define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ __attribute((no_sanitize_thread))
        -:  830:#else
        -:  831:#define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
        -:  832:#endif
        -:  833:
        -:  834:namespace testing {
        -:  835:
        -:  836:class Message;
        -:  837:
        -:  838:// Legacy imports for backwards compatibility.
        -:  839:// New code should use std:: names directly.
        -:  840:using std::get;
        -:  841:using std::make_tuple;
        -:  842:using std::tuple;
        -:  843:using std::tuple_element;
        -:  844:using std::tuple_size;
        -:  845:
        -:  846:namespace internal {
        -:  847:
        -:  848:// A secret type that Google Test users don't know about.  It has no
        -:  849:// definition on purpose.  Therefore it's impossible to create a
        -:  850:// Secret object, which is what we want.
        -:  851:class Secret;
        -:  852:
        -:  853:// A helper for suppressing warnings on constant condition.  It just
        -:  854:// returns 'condition'.
        -:  855:GTEST_API_ bool IsTrue(bool condition);
        -:  856:
        -:  857:// Defines RE.
        -:  858:
        -:  859:#if GTEST_USES_RE2
        -:  860:
        -:  861:// This is almost `using RE = ::RE2`, except it is copy-constructible, and it
        -:  862:// needs to disambiguate the `std::string`, `absl::string_view`, and `const
        -:  863:// char*` constructors.
        -:  864:class GTEST_API_ RE {
        -:  865: public:
        -:  866:  RE(absl::string_view regex) : regex_(regex) {}                  // NOLINT
        -:  867:  RE(const char* regex) : RE(absl::string_view(regex)) {}         // NOLINT
        -:  868:  RE(const std::string& regex) : RE(absl::string_view(regex)) {}  // NOLINT
        -:  869:  RE(const RE& other) : RE(other.pattern()) {}
        -:  870:
        -:  871:  const std::string& pattern() const { return regex_.pattern(); }
        -:  872:
        -:  873:  static bool FullMatch(absl::string_view str, const RE& re) {
        -:  874:    return RE2::FullMatch(str, re.regex_);
        -:  875:  }
        -:  876:  static bool PartialMatch(absl::string_view str, const RE& re) {
        -:  877:    return RE2::PartialMatch(str, re.regex_);
        -:  878:  }
        -:  879:
        -:  880: private:
        -:  881:  RE2 regex_;
        -:  882:};
        -:  883:
        -:  884:#elif GTEST_USES_POSIX_RE || GTEST_USES_SIMPLE_RE
        -:  885:
        -:  886:// A simple C++ wrapper for <regex.h>.  It uses the POSIX Extended
        -:  887:// Regular Expression syntax.
        -:  888:class GTEST_API_ RE {
        -:  889: public:
        -:  890:  // A copy constructor is required by the Standard to initialize object
        -:  891:  // references from r-values.
        -:  892:  RE(const RE& other) { Init(other.pattern()); }
        -:  893:
        -:  894:  // Constructs an RE from a string.
        -:  895:  RE(const ::std::string& regex) { Init(regex.c_str()); }  // NOLINT
        -:  896:
        -:  897:  RE(const char* regex) { Init(regex); }  // NOLINT
        -:  898:  ~RE();
        -:  899:
        -:  900:  // Returns the string representation of the regex.
        -:  901:  const char* pattern() const { return pattern_; }
        -:  902:
        -:  903:  // FullMatch(str, re) returns true if and only if regular expression re
        -:  904:  // matches the entire str.
        -:  905:  // PartialMatch(str, re) returns true if and only if regular expression re
        -:  906:  // matches a substring of str (including str itself).
        -:  907:  static bool FullMatch(const ::std::string& str, const RE& re) {
        -:  908:    return FullMatch(str.c_str(), re);
        -:  909:  }
        -:  910:  static bool PartialMatch(const ::std::string& str, const RE& re) {
        -:  911:    return PartialMatch(str.c_str(), re);
        -:  912:  }
        -:  913:
        -:  914:  static bool FullMatch(const char* str, const RE& re);
        -:  915:  static bool PartialMatch(const char* str, const RE& re);
        -:  916:
        -:  917: private:
        -:  918:  void Init(const char* regex);
        -:  919:  const char* pattern_;
        -:  920:  bool is_valid_;
        -:  921:
        -:  922:#if GTEST_USES_POSIX_RE
        -:  923:
        -:  924:  regex_t full_regex_;     // For FullMatch().
        -:  925:  regex_t partial_regex_;  // For PartialMatch().
        -:  926:
        -:  927:#else  // GTEST_USES_SIMPLE_RE
        -:  928:
        -:  929:  const char* full_pattern_;  // For FullMatch();
        -:  930:
        -:  931:#endif
        -:  932:};
        -:  933:
        -:  934:#endif  // ::testing::internal::RE implementation
        -:  935:
        -:  936:// Formats a source file path and a line number as they would appear
        -:  937:// in an error message from the compiler used to compile this code.
        -:  938:GTEST_API_ ::std::string FormatFileLocation(const char* file, int line);
        -:  939:
        -:  940:// Formats a file location for compiler-independent XML output.
        -:  941:// Although this function is not platform dependent, we put it next to
        -:  942:// FormatFileLocation in order to contrast the two functions.
        -:  943:GTEST_API_ ::std::string FormatCompilerIndependentFileLocation(const char* file,
        -:  944:                                                               int line);
        -:  945:
        -:  946:// Defines logging utilities:
        -:  947://   GTEST_LOG_(severity) - logs messages at the specified severity level. The
        -:  948://                          message itself is streamed into the macro.
        -:  949://   LogToStderr()  - directs all log messages to stderr.
        -:  950://   FlushInfoLog() - flushes informational log messages.
        -:  951:
        -:  952:enum GTestLogSeverity { GTEST_INFO, GTEST_WARNING, GTEST_ERROR, GTEST_FATAL };
        -:  953:
        -:  954:// Formats log entry severity, provides a stream object for streaming the
        -:  955:// log message, and terminates the message with a newline when going out of
        -:  956:// scope.
        -:  957:class GTEST_API_ GTestLog {
        -:  958: public:
        -:  959:  GTestLog(GTestLogSeverity severity, const char* file, int line);
        -:  960:
        -:  961:  // Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.
        -:  962:  ~GTestLog();
        -:  963:
function _ZN7testing8internal8GTestLog9GetStreamEv called 0 returned 0% blocks executed 0%
    #####:  964:  ::std::ostream& GetStream() { return ::std::cerr; }
    %%%%%:  964-block  0
        -:  965:
        -:  966: private:
        -:  967:  const GTestLogSeverity severity_;
        -:  968:
        -:  969:  GTestLog(const GTestLog&) = delete;
        -:  970:  GTestLog& operator=(const GTestLog&) = delete;
        -:  971:};
        -:  972:
        -:  973:#if !defined(GTEST_LOG_)
        -:  974:
        -:  975:#define GTEST_LOG_(severity)                                           \
        -:  976:  ::testing::internal::GTestLog(::testing::internal::GTEST_##severity, \
        -:  977:                                __FILE__, __LINE__)                    \
        -:  978:      .GetStream()
        -:  979:
function _ZN7testing8internal11LogToStderrEv called 0 returned 0% blocks executed 0%
    #####:  980:inline void LogToStderr() {}
function _ZN7testing8internal12FlushInfoLogEv called 0 returned 0% blocks executed 0%
    #####:  981:inline void FlushInfoLog() { fflush(nullptr); }
    %%%%%:  981-block  0
call    0 never executed
        -:  982:
        -:  983:#endif  // !defined(GTEST_LOG_)
        -:  984:
        -:  985:#if !defined(GTEST_CHECK_)
        -:  986:// INTERNAL IMPLEMENTATION - DO NOT USE.
        -:  987://
        -:  988:// GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition
        -:  989:// is not satisfied.
        -:  990://  Synopsis:
        -:  991://    GTEST_CHECK_(boolean_condition);
        -:  992://     or
        -:  993://    GTEST_CHECK_(boolean_condition) << "Additional message";
        -:  994://
        -:  995://    This checks the condition and if the condition is not satisfied
        -:  996://    it prints message about the condition violation, including the
        -:  997://    condition itself, plus additional message streamed into it, if any,
        -:  998://    and then it aborts the program. It aborts the program irrespective of
        -:  999://    whether it is built in the debug mode or not.
        -: 1000:#define GTEST_CHECK_(condition)               \
        -: 1001:  GTEST_AMBIGUOUS_ELSE_BLOCKER_               \
        -: 1002:  if (::testing::internal::IsTrue(condition)) \
        -: 1003:    ;                                         \
        -: 1004:  else                                        \
        -: 1005:    GTEST_LOG_(FATAL) << "Condition " #condition " failed. "
        -: 1006:#endif  // !defined(GTEST_CHECK_)
        -: 1007:
        -: 1008:// An all-mode assert to verify that the given POSIX-style function
        -: 1009:// call returns 0 (indicating success).  Known limitation: this
        -: 1010:// doesn't expand to a balanced 'if' statement, so enclose the macro
        -: 1011:// in {} if you need to use it as the only statement in an 'if'
        -: 1012:// branch.
        -: 1013:#define GTEST_CHECK_POSIX_SUCCESS_(posix_call) \
        -: 1014:  if (const int gtest_error = (posix_call))    \
        -: 1015:  GTEST_LOG_(FATAL) << #posix_call << "failed with error " << gtest_error
        -: 1016:
        -: 1017:// Transforms "T" into "const T&" according to standard reference collapsing
        -: 1018:// rules (this is only needed as a backport for C++98 compilers that do not
        -: 1019:// support reference collapsing). Specifically, it transforms:
        -: 1020://
        -: 1021://   char         ==> const char&
        -: 1022://   const char   ==> const char&
        -: 1023://   char&        ==> char&
        -: 1024://   const char&  ==> const char&
        -: 1025://
        -: 1026:// Note that the non-const reference will not have "const" added. This is
        -: 1027:// standard, and necessary so that "T" can always bind to "const T&".
        -: 1028:template <typename T>
        -: 1029:struct ConstRef {
        -: 1030:  typedef const T& type;
        -: 1031:};
        -: 1032:template <typename T>
        -: 1033:struct ConstRef<T&> {
        -: 1034:  typedef T& type;
        -: 1035:};
        -: 1036:
        -: 1037:// The argument T must depend on some template parameters.
        -: 1038:#define GTEST_REFERENCE_TO_CONST_(T) \
        -: 1039:  typename ::testing::internal::ConstRef<T>::type
        -: 1040:
        -: 1041:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
        -: 1042://
        -: 1043:// Use ImplicitCast_ as a safe version of static_cast for upcasting in
        -: 1044:// the type hierarchy (e.g. casting a Foo* to a SuperclassOfFoo* or a
        -: 1045:// const Foo*).  When you use ImplicitCast_, the compiler checks that
        -: 1046:// the cast is safe.  Such explicit ImplicitCast_s are necessary in
        -: 1047:// surprisingly many situations where C++ demands an exact type match
        -: 1048:// instead of an argument type convertible to a target type.
        -: 1049://
        -: 1050:// The syntax for using ImplicitCast_ is the same as for static_cast:
        -: 1051://
        -: 1052://   ImplicitCast_<ToType>(expr)
        -: 1053://
        -: 1054:// ImplicitCast_ would have been part of the C++ standard library,
        -: 1055:// but the proposal was submitted too late.  It will probably make
        -: 1056:// its way into the language in the future.
        -: 1057://
        -: 1058:// This relatively ugly name is intentional. It prevents clashes with
        -: 1059:// similar functions users may have (e.g., implicit_cast). The internal
        -: 1060:// namespace alone is not enough because the function can be found by ADL.
        -: 1061:template <typename To>
function _ZN7testing8internal13ImplicitCast_IPKvEET_S4_ called 0 returned 0% blocks executed 0%
    #####: 1062:inline To ImplicitCast_(To x) {
    #####: 1063:  return x;
    %%%%%: 1063-block  0
        -: 1064:}
        -: 1065:
        -: 1066:// When you upcast (that is, cast a pointer from type Foo to type
        -: 1067:// SuperclassOfFoo), it's fine to use ImplicitCast_<>, since upcasts
        -: 1068:// always succeed.  When you downcast (that is, cast a pointer from
        -: 1069:// type Foo to type SubclassOfFoo), static_cast<> isn't safe, because
        -: 1070:// how do you know the pointer is really of type SubclassOfFoo?  It
        -: 1071:// could be a bare Foo, or of type DifferentSubclassOfFoo.  Thus,
        -: 1072:// when you downcast, you should use this macro.  In debug mode, we
        -: 1073:// use dynamic_cast<> to double-check the downcast is legal (we die
        -: 1074:// if it's not).  In normal mode, we do the efficient static_cast<>
        -: 1075:// instead.  Thus, it's important to test in debug mode to make sure
        -: 1076:// the cast is legal!
        -: 1077://    This is the only place in the code we should use dynamic_cast<>.
        -: 1078:// In particular, you SHOULDN'T be using dynamic_cast<> in order to
        -: 1079:// do RTTI (eg code like this:
        -: 1080://    if (dynamic_cast<Subclass1>(foo)) HandleASubclass1Object(foo);
        -: 1081://    if (dynamic_cast<Subclass2>(foo)) HandleASubclass2Object(foo);
        -: 1082:// You should design the code some other way not to need this.
        -: 1083://
        -: 1084:// This relatively ugly name is intentional. It prevents clashes with
        -: 1085:// similar functions users may have (e.g., down_cast). The internal
        -: 1086:// namespace alone is not enough because the function can be found by ADL.
        -: 1087:template <typename To, typename From>  // use like this: DownCast_<T*>(foo);
        -: 1088:inline To DownCast_(From* f) {         // so we only accept pointers
        -: 1089:  // Ensures that To is a sub-type of From *.  This test is here only
        -: 1090:  // for compile-time type checking, and has no overhead in an
        -: 1091:  // optimized build at run-time, as it will be optimized away
        -: 1092:  // completely.
        -: 1093:  GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -: 1094:  if (false) {
        -: 1095:    GTEST_INTENTIONAL_CONST_COND_POP_()
        -: 1096:    const To to = nullptr;
        -: 1097:    ::testing::internal::ImplicitCast_<From*>(to);
        -: 1098:  }
        -: 1099:
        -: 1100:#if GTEST_HAS_RTTI
        -: 1101:  // RTTI: debug mode only!
        -: 1102:  GTEST_CHECK_(f == nullptr || dynamic_cast<To>(f) != nullptr);
        -: 1103:#endif
        -: 1104:  return static_cast<To>(f);
        -: 1105:}
        -: 1106:
        -: 1107:// Downcasts the pointer of type Base to Derived.
        -: 1108:// Derived must be a subclass of Base. The parameter MUST
        -: 1109:// point to a class of type Derived, not any subclass of it.
        -: 1110:// When RTTI is available, the function performs a runtime
        -: 1111:// check to enforce this.
        -: 1112:template <class Derived, class Base>
    #####: 1113:Derived* CheckedDowncastToActualType(Base* base) {
        -: 1114:#if GTEST_HAS_RTTI
    #####: 1115:  GTEST_CHECK_(typeid(*base) == typeid(Derived));
        -: 1116:#endif
        -: 1117:
        -: 1118:#if GTEST_HAS_DOWNCAST_
        -: 1119:  return ::down_cast<Derived*>(base);
        -: 1120:#elif GTEST_HAS_RTTI
    #####: 1121:  return dynamic_cast<Derived*>(base);  // NOLINT
        -: 1122:#else
        -: 1123:  return static_cast<Derived*>(base);  // Poor man's downcast.
        -: 1124:#endif
        -: 1125:}
------------------
_ZN7testing8internal27CheckedDowncastToActualTypeINS0_11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE11ValueHolderENS0_26ThreadLocalValueHolderBaseEEEPT_PT0_:
function _ZN7testing8internal27CheckedDowncastToActualTypeINS0_11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE11ValueHolderENS0_26ThreadLocalValueHolderBaseEEEPT_PT0_ called 0 returned 0% blocks executed 0%
    #####: 1113:Derived* CheckedDowncastToActualType(Base* base) {
        -: 1114:#if GTEST_HAS_RTTI
    #####: 1115:  GTEST_CHECK_(typeid(*base) == typeid(Derived));
    %%%%%: 1115-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1115-block  1
    %%%%%: 1115-block  2
call    2 never executed
    %%%%%: 1115-block  3
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1115-block  4
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1115-block  5
call   12 never executed
    $$$$$: 1115-block  6
call   13 never executed
        -: 1116:#endif
        -: 1117:
        -: 1118:#if GTEST_HAS_DOWNCAST_
        -: 1119:  return ::down_cast<Derived*>(base);
        -: 1120:#elif GTEST_HAS_RTTI
    #####: 1121:  return dynamic_cast<Derived*>(base);  // NOLINT
    %%%%%: 1121-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1121-block  1
    %%%%%: 1121-block  2
    %%%%%: 1121-block  3
    %%%%%: 1121-block  4
        -: 1122:#else
        -: 1123:  return static_cast<Derived*>(base);  // Poor man's downcast.
        -: 1124:#endif
        -: 1125:}
------------------
_ZN7testing8internal27CheckedDowncastToActualTypeINS0_11ThreadLocalISt6vectorINS0_9TraceInfoESaIS4_EEE11ValueHolderENS0_26ThreadLocalValueHolderBaseEEEPT_PT0_:
function _ZN7testing8internal27CheckedDowncastToActualTypeINS0_11ThreadLocalISt6vectorINS0_9TraceInfoESaIS4_EEE11ValueHolderENS0_26ThreadLocalValueHolderBaseEEEPT_PT0_ called 0 returned 0% blocks executed 0%
    #####: 1113:Derived* CheckedDowncastToActualType(Base* base) {
        -: 1114:#if GTEST_HAS_RTTI
    #####: 1115:  GTEST_CHECK_(typeid(*base) == typeid(Derived));
    %%%%%: 1115-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1115-block  1
    %%%%%: 1115-block  2
call    2 never executed
    %%%%%: 1115-block  3
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1115-block  4
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1115-block  5
call   12 never executed
    $$$$$: 1115-block  6
call   13 never executed
        -: 1116:#endif
        -: 1117:
        -: 1118:#if GTEST_HAS_DOWNCAST_
        -: 1119:  return ::down_cast<Derived*>(base);
        -: 1120:#elif GTEST_HAS_RTTI
    #####: 1121:  return dynamic_cast<Derived*>(base);  // NOLINT
    %%%%%: 1121-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1121-block  1
    %%%%%: 1121-block  2
    %%%%%: 1121-block  3
    %%%%%: 1121-block  4
        -: 1122:#else
        -: 1123:  return static_cast<Derived*>(base);  // Poor man's downcast.
        -: 1124:#endif
        -: 1125:}
------------------
        -: 1126:
        -: 1127:#if GTEST_HAS_STREAM_REDIRECTION
        -: 1128:
        -: 1129:// Defines the stderr capturer:
        -: 1130://   CaptureStdout     - starts capturing stdout.
        -: 1131://   GetCapturedStdout - stops capturing stdout and returns the captured string.
        -: 1132://   CaptureStderr     - starts capturing stderr.
        -: 1133://   GetCapturedStderr - stops capturing stderr and returns the captured string.
        -: 1134://
        -: 1135:GTEST_API_ void CaptureStdout();
        -: 1136:GTEST_API_ std::string GetCapturedStdout();
        -: 1137:GTEST_API_ void CaptureStderr();
        -: 1138:GTEST_API_ std::string GetCapturedStderr();
        -: 1139:
        -: 1140:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -: 1141:// Returns the size (in bytes) of a file.
        -: 1142:GTEST_API_ size_t GetFileSize(FILE* file);
        -: 1143:
        -: 1144:// Reads the entire content of a file as a string.
        -: 1145:GTEST_API_ std::string ReadEntireFile(FILE* file);
        -: 1146:
        -: 1147:// All command line arguments.
        -: 1148:GTEST_API_ std::vector<std::string> GetArgvs();
        -: 1149:
        -: 1150:#if GTEST_HAS_DEATH_TEST
        -: 1151:
        -: 1152:std::vector<std::string> GetInjectableArgvs();
        -: 1153:// Deprecated: pass the args vector by value instead.
        -: 1154:void SetInjectableArgvs(const std::vector<std::string>* new_argvs);
        -: 1155:void SetInjectableArgvs(const std::vector<std::string>& new_argvs);
        -: 1156:void ClearInjectableArgvs();
        -: 1157:
        -: 1158:#endif  // GTEST_HAS_DEATH_TEST
        -: 1159:
        -: 1160:// Defines synchronization primitives.
        -: 1161:#if GTEST_IS_THREADSAFE
        -: 1162:
        -: 1163:#if GTEST_OS_WINDOWS
        -: 1164:// Provides leak-safe Windows kernel handle ownership.
        -: 1165:// Used in death tests and in threading support.
        -: 1166:class GTEST_API_ AutoHandle {
        -: 1167: public:
        -: 1168:  // Assume that Win32 HANDLE type is equivalent to void*. Doing so allows us to
        -: 1169:  // avoid including <windows.h> in this header file. Including <windows.h> is
        -: 1170:  // undesirable because it defines a lot of symbols and macros that tend to
        -: 1171:  // conflict with client code. This assumption is verified by
        -: 1172:  // WindowsTypesTest.HANDLEIsVoidStar.
        -: 1173:  typedef void* Handle;
        -: 1174:  AutoHandle();
        -: 1175:  explicit AutoHandle(Handle handle);
        -: 1176:
        -: 1177:  ~AutoHandle();
        -: 1178:
        -: 1179:  Handle Get() const;
        -: 1180:  void Reset();
        -: 1181:  void Reset(Handle handle);
        -: 1182:
        -: 1183: private:
        -: 1184:  // Returns true if and only if the handle is a valid handle object that can be
        -: 1185:  // closed.
        -: 1186:  bool IsCloseable() const;
        -: 1187:
        -: 1188:  Handle handle_;
        -: 1189:
        -: 1190:  AutoHandle(const AutoHandle&) = delete;
        -: 1191:  AutoHandle& operator=(const AutoHandle&) = delete;
        -: 1192:};
        -: 1193:#endif
        -: 1194:
        -: 1195:#if GTEST_HAS_NOTIFICATION_
        -: 1196:// Notification has already been imported into the namespace.
        -: 1197:// Nothing to do here.
        -: 1198:
        -: 1199:#else
        -: 1200:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \
        -: 1201:/* class A needs to have dll-interface to be used by clients of class B */)
        -: 1202:
        -: 1203:// Allows a controller thread to pause execution of newly created
        -: 1204:// threads until notified.  Instances of this class must be created
        -: 1205:// and destroyed in the controller thread.
        -: 1206://
        -: 1207:// This class is only for testing Google Test's own constructs. Do not
        -: 1208:// use it in user tests, either directly or indirectly.
        -: 1209:// TODO(b/203539622): Replace unconditionally with absl::Notification.
        -: 1210:class GTEST_API_ Notification {
        -: 1211: public:
        -: 1212:  Notification() : notified_(false) {}
        -: 1213:  Notification(const Notification&) = delete;
        -: 1214:  Notification& operator=(const Notification&) = delete;
        -: 1215:
        -: 1216:  // Notifies all threads created with this notification to start. Must
        -: 1217:  // be called from the controller thread.
        -: 1218:  void Notify() {
        -: 1219:    std::lock_guard<std::mutex> lock(mu_);
        -: 1220:    notified_ = true;
        -: 1221:    cv_.notify_all();
        -: 1222:  }
        -: 1223:
        -: 1224:  // Blocks until the controller thread notifies. Must be called from a test
        -: 1225:  // thread.
        -: 1226:  void WaitForNotification() {
        -: 1227:    std::unique_lock<std::mutex> lock(mu_);
        -: 1228:    cv_.wait(lock, [this]() { return notified_; });
        -: 1229:  }
        -: 1230:
        -: 1231: private:
        -: 1232:  std::mutex mu_;
        -: 1233:  std::condition_variable cv_;
        -: 1234:  bool notified_;
        -: 1235:};
        -: 1236:GTEST_DISABLE_MSC_WARNINGS_POP_()  // 4251
        -: 1237:#endif  // GTEST_HAS_NOTIFICATION_
        -: 1238:
        -: 1239:// On MinGW, we can have both GTEST_OS_WINDOWS and GTEST_HAS_PTHREAD
        -: 1240:// defined, but we don't want to use MinGW's pthreads implementation, which
        -: 1241:// has conformance problems with some versions of the POSIX standard.
        -: 1242:#if GTEST_HAS_PTHREAD && !GTEST_OS_WINDOWS_MINGW
        -: 1243:
        -: 1244:// As a C-function, ThreadFuncWithCLinkage cannot be templated itself.
        -: 1245:// Consequently, it cannot select a correct instantiation of ThreadWithParam
        -: 1246:// in order to call its Run(). Introducing ThreadWithParamBase as a
        -: 1247:// non-templated base class for ThreadWithParam allows us to bypass this
        -: 1248:// problem.
        -: 1249:class ThreadWithParamBase {
        -: 1250: public:
        -: 1251:  virtual ~ThreadWithParamBase() {}
        -: 1252:  virtual void Run() = 0;
        -: 1253:};
        -: 1254:
        -: 1255:// pthread_create() accepts a pointer to a function type with the C linkage.
        -: 1256:// According to the Standard (7.5/1), function types with different linkages
        -: 1257:// are different even if they are otherwise identical.  Some compilers (for
        -: 1258:// example, SunStudio) treat them as different types.  Since class methods
        -: 1259:// cannot be defined with C-linkage we need to define a free C-function to
        -: 1260:// pass into pthread_create().
        -: 1261:extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {
        -: 1262:  static_cast<ThreadWithParamBase*>(thread)->Run();
        -: 1263:  return nullptr;
        -: 1264:}
        -: 1265:
        -: 1266:// Helper class for testing Google Test's multi-threading constructs.
        -: 1267:// To use it, write:
        -: 1268://
        -: 1269://   void ThreadFunc(int param) { /* Do things with param */ }
        -: 1270://   Notification thread_can_start;
        -: 1271://   ...
        -: 1272://   // The thread_can_start parameter is optional; you can supply NULL.
        -: 1273://   ThreadWithParam<int> thread(&ThreadFunc, 5, &thread_can_start);
        -: 1274://   thread_can_start.Notify();
        -: 1275://
        -: 1276:// These classes are only for testing Google Test's own constructs. Do
        -: 1277:// not use them in user tests, either directly or indirectly.
        -: 1278:template <typename T>
        -: 1279:class ThreadWithParam : public ThreadWithParamBase {
        -: 1280: public:
        -: 1281:  typedef void UserThreadFunc(T);
        -: 1282:
        -: 1283:  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
        -: 1284:      : func_(func),
        -: 1285:        param_(param),
        -: 1286:        thread_can_start_(thread_can_start),
        -: 1287:        finished_(false) {
        -: 1288:    ThreadWithParamBase* const base = this;
        -: 1289:    // The thread can be created only after all fields except thread_
        -: 1290:    // have been initialized.
        -: 1291:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1292:        pthread_create(&thread_, nullptr, &ThreadFuncWithCLinkage, base));
        -: 1293:  }
        -: 1294:  ~ThreadWithParam() override { Join(); }
        -: 1295:
        -: 1296:  void Join() {
        -: 1297:    if (!finished_) {
        -: 1298:      GTEST_CHECK_POSIX_SUCCESS_(pthread_join(thread_, nullptr));
        -: 1299:      finished_ = true;
        -: 1300:    }
        -: 1301:  }
        -: 1302:
        -: 1303:  void Run() override {
        -: 1304:    if (thread_can_start_ != nullptr) thread_can_start_->WaitForNotification();
        -: 1305:    func_(param_);
        -: 1306:  }
        -: 1307:
        -: 1308: private:
        -: 1309:  UserThreadFunc* const func_;  // User-supplied thread function.
        -: 1310:  const T param_;  // User-supplied parameter to the thread function.
        -: 1311:  // When non-NULL, used to block execution until the controller thread
        -: 1312:  // notifies.
        -: 1313:  Notification* const thread_can_start_;
        -: 1314:  bool finished_;  // true if and only if we know that the thread function has
        -: 1315:                   // finished.
        -: 1316:  pthread_t thread_;  // The native thread object.
        -: 1317:
        -: 1318:  ThreadWithParam(const ThreadWithParam&) = delete;
        -: 1319:  ThreadWithParam& operator=(const ThreadWithParam&) = delete;
        -: 1320:};
        -: 1321:#endif  // !GTEST_OS_WINDOWS && GTEST_HAS_PTHREAD ||
        -: 1322:        // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1323:
        -: 1324:#if GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1325:// Mutex and ThreadLocal have already been imported into the namespace.
        -: 1326:// Nothing to do here.
        -: 1327:
        -: 1328:#elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 1329:
        -: 1330:// Mutex implements mutex on Windows platforms.  It is used in conjunction
        -: 1331:// with class MutexLock:
        -: 1332://
        -: 1333://   Mutex mutex;
        -: 1334://   ...
        -: 1335://   MutexLock lock(&mutex);  // Acquires the mutex and releases it at the
        -: 1336://                            // end of the current scope.
        -: 1337://
        -: 1338:// A static Mutex *must* be defined or declared using one of the following
        -: 1339:// macros:
        -: 1340://   GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);
        -: 1341://   GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);
        -: 1342://
        -: 1343:// (A non-static Mutex is defined/declared in the usual way).
        -: 1344:class GTEST_API_ Mutex {
        -: 1345: public:
        -: 1346:  enum MutexType { kStatic = 0, kDynamic = 1 };
        -: 1347:  // We rely on kStaticMutex being 0 as it is to what the linker initializes
        -: 1348:  // type_ in static mutexes.  critical_section_ will be initialized lazily
        -: 1349:  // in ThreadSafeLazyInit().
        -: 1350:  enum StaticConstructorSelector { kStaticMutex = 0 };
        -: 1351:
        -: 1352:  // This constructor intentionally does nothing.  It relies on type_ being
        -: 1353:  // statically initialized to 0 (effectively setting it to kStatic) and on
        -: 1354:  // ThreadSafeLazyInit() to lazily initialize the rest of the members.
        -: 1355:  explicit Mutex(StaticConstructorSelector /*dummy*/) {}
        -: 1356:
        -: 1357:  Mutex();
        -: 1358:  ~Mutex();
        -: 1359:
        -: 1360:  void Lock();
        -: 1361:
        -: 1362:  void Unlock();
        -: 1363:
        -: 1364:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1365:  // with high probability.
        -: 1366:  void AssertHeld();
        -: 1367:
        -: 1368: private:
        -: 1369:  // Initializes owner_thread_id_ and critical_section_ in static mutexes.
        -: 1370:  void ThreadSafeLazyInit();
        -: 1371:
        -: 1372:  // Per https://blogs.msdn.microsoft.com/oldnewthing/20040223-00/?p=40503,
        -: 1373:  // we assume that 0 is an invalid value for thread IDs.
        -: 1374:  unsigned int owner_thread_id_;
        -: 1375:
        -: 1376:  // For static mutexes, we rely on these members being initialized to zeros
        -: 1377:  // by the linker.
        -: 1378:  MutexType type_;
        -: 1379:  long critical_section_init_phase_;  // NOLINT
        -: 1380:  GTEST_CRITICAL_SECTION* critical_section_;
        -: 1381:
        -: 1382:  Mutex(const Mutex&) = delete;
        -: 1383:  Mutex& operator=(const Mutex&) = delete;
        -: 1384:};
        -: 1385:
        -: 1386:#define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1387:  extern ::testing::internal::Mutex mutex
        -: 1388:
        -: 1389:#define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1390:  ::testing::internal::Mutex mutex(::testing::internal::Mutex::kStaticMutex)
        -: 1391:
        -: 1392:// We cannot name this class MutexLock because the ctor declaration would
        -: 1393:// conflict with a macro named MutexLock, which is defined on some
        -: 1394:// platforms. That macro is used as a defensive measure to prevent against
        -: 1395:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1396:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1397:class GTestMutexLock {
        -: 1398: public:
        -: 1399:  explicit GTestMutexLock(Mutex* mutex) : mutex_(mutex) { mutex_->Lock(); }
        -: 1400:
        -: 1401:  ~GTestMutexLock() { mutex_->Unlock(); }
        -: 1402:
        -: 1403: private:
        -: 1404:  Mutex* const mutex_;
        -: 1405:
        -: 1406:  GTestMutexLock(const GTestMutexLock&) = delete;
        -: 1407:  GTestMutexLock& operator=(const GTestMutexLock&) = delete;
        -: 1408:};
        -: 1409:
        -: 1410:typedef GTestMutexLock MutexLock;
        -: 1411:
        -: 1412:// Base class for ValueHolder<T>.  Allows a caller to hold and delete a value
        -: 1413:// without knowing its type.
        -: 1414:class ThreadLocalValueHolderBase {
        -: 1415: public:
        -: 1416:  virtual ~ThreadLocalValueHolderBase() {}
        -: 1417:};
        -: 1418:
        -: 1419:// Provides a way for a thread to send notifications to a ThreadLocal
        -: 1420:// regardless of its parameter type.
        -: 1421:class ThreadLocalBase {
        -: 1422: public:
        -: 1423:  // Creates a new ValueHolder<T> object holding a default value passed to
        -: 1424:  // this ThreadLocal<T>'s constructor and returns it.  It is the caller's
        -: 1425:  // responsibility not to call this when the ThreadLocal<T> instance already
        -: 1426:  // has a value on the current thread.
        -: 1427:  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const = 0;
        -: 1428:
        -: 1429: protected:
        -: 1430:  ThreadLocalBase() {}
        -: 1431:  virtual ~ThreadLocalBase() {}
        -: 1432:
        -: 1433: private:
        -: 1434:  ThreadLocalBase(const ThreadLocalBase&) = delete;
        -: 1435:  ThreadLocalBase& operator=(const ThreadLocalBase&) = delete;
        -: 1436:};
        -: 1437:
        -: 1438:// Maps a thread to a set of ThreadLocals that have values instantiated on that
        -: 1439:// thread and notifies them when the thread exits.  A ThreadLocal instance is
        -: 1440:// expected to persist until all threads it has values on have terminated.
        -: 1441:class GTEST_API_ ThreadLocalRegistry {
        -: 1442: public:
        -: 1443:  // Registers thread_local_instance as having value on the current thread.
        -: 1444:  // Returns a value that can be used to identify the thread from other threads.
        -: 1445:  static ThreadLocalValueHolderBase* GetValueOnCurrentThread(
        -: 1446:      const ThreadLocalBase* thread_local_instance);
        -: 1447:
        -: 1448:  // Invoked when a ThreadLocal instance is destroyed.
        -: 1449:  static void OnThreadLocalDestroyed(
        -: 1450:      const ThreadLocalBase* thread_local_instance);
        -: 1451:};
        -: 1452:
        -: 1453:class GTEST_API_ ThreadWithParamBase {
        -: 1454: public:
        -: 1455:  void Join();
        -: 1456:
        -: 1457: protected:
        -: 1458:  class Runnable {
        -: 1459:   public:
        -: 1460:    virtual ~Runnable() {}
        -: 1461:    virtual void Run() = 0;
        -: 1462:  };
        -: 1463:
        -: 1464:  ThreadWithParamBase(Runnable* runnable, Notification* thread_can_start);
        -: 1465:  virtual ~ThreadWithParamBase();
        -: 1466:
        -: 1467: private:
        -: 1468:  AutoHandle thread_;
        -: 1469:};
        -: 1470:
        -: 1471:// Helper class for testing Google Test's multi-threading constructs.
        -: 1472:template <typename T>
        -: 1473:class ThreadWithParam : public ThreadWithParamBase {
        -: 1474: public:
        -: 1475:  typedef void UserThreadFunc(T);
        -: 1476:
        -: 1477:  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
        -: 1478:      : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) {}
        -: 1479:  virtual ~ThreadWithParam() {}
        -: 1480:
        -: 1481: private:
        -: 1482:  class RunnableImpl : public Runnable {
        -: 1483:   public:
        -: 1484:    RunnableImpl(UserThreadFunc* func, T param) : func_(func), param_(param) {}
        -: 1485:    virtual ~RunnableImpl() {}
        -: 1486:    virtual void Run() { func_(param_); }
        -: 1487:
        -: 1488:   private:
        -: 1489:    UserThreadFunc* const func_;
        -: 1490:    const T param_;
        -: 1491:
        -: 1492:    RunnableImpl(const RunnableImpl&) = delete;
        -: 1493:    RunnableImpl& operator=(const RunnableImpl&) = delete;
        -: 1494:  };
        -: 1495:
        -: 1496:  ThreadWithParam(const ThreadWithParam&) = delete;
        -: 1497:  ThreadWithParam& operator=(const ThreadWithParam&) = delete;
        -: 1498:};
        -: 1499:
        -: 1500:// Implements thread-local storage on Windows systems.
        -: 1501://
        -: 1502://   // Thread 1
        -: 1503://   ThreadLocal<int> tl(100);  // 100 is the default value for each thread.
        -: 1504://
        -: 1505://   // Thread 2
        -: 1506://   tl.set(150);  // Changes the value for thread 2 only.
        -: 1507://   EXPECT_EQ(150, tl.get());
        -: 1508://
        -: 1509://   // Thread 1
        -: 1510://   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.
        -: 1511://   tl.set(200);
        -: 1512://   EXPECT_EQ(200, tl.get());
        -: 1513://
        -: 1514:// The template type argument T must have a public copy constructor.
        -: 1515:// In addition, the default ThreadLocal constructor requires T to have
        -: 1516:// a public default constructor.
        -: 1517://
        -: 1518:// The users of a TheadLocal instance have to make sure that all but one
        -: 1519:// threads (including the main one) using that instance have exited before
        -: 1520:// destroying it. Otherwise, the per-thread objects managed for them by the
        -: 1521:// ThreadLocal instance are not guaranteed to be destroyed on all platforms.
        -: 1522://
        -: 1523:// Google Test only uses global ThreadLocal objects.  That means they
        -: 1524:// will die after main() has returned.  Therefore, no per-thread
        -: 1525:// object managed by Google Test will be leaked as long as all threads
        -: 1526:// using Google Test have exited when main() returns.
        -: 1527:template <typename T>
        -: 1528:class ThreadLocal : public ThreadLocalBase {
        -: 1529: public:
        -: 1530:  ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) {}
        -: 1531:  explicit ThreadLocal(const T& value)
        -: 1532:      : default_factory_(new InstanceValueHolderFactory(value)) {}
        -: 1533:
        -: 1534:  ~ThreadLocal() override { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }
        -: 1535:
        -: 1536:  T* pointer() { return GetOrCreateValue(); }
        -: 1537:  const T* pointer() const { return GetOrCreateValue(); }
        -: 1538:  const T& get() const { return *pointer(); }
        -: 1539:  void set(const T& value) { *pointer() = value; }
        -: 1540:
        -: 1541: private:
        -: 1542:  // Holds a value of T.  Can be deleted via its base class without the caller
        -: 1543:  // knowing the type of T.
        -: 1544:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 1545:   public:
        -: 1546:    ValueHolder() : value_() {}
        -: 1547:    explicit ValueHolder(const T& value) : value_(value) {}
        -: 1548:
        -: 1549:    T* pointer() { return &value_; }
        -: 1550:
        -: 1551:   private:
        -: 1552:    T value_;
        -: 1553:    ValueHolder(const ValueHolder&) = delete;
        -: 1554:    ValueHolder& operator=(const ValueHolder&) = delete;
        -: 1555:  };
        -: 1556:
        -: 1557:  T* GetOrCreateValue() const {
        -: 1558:    return static_cast<ValueHolder*>(
        -: 1559:               ThreadLocalRegistry::GetValueOnCurrentThread(this))
        -: 1560:        ->pointer();
        -: 1561:  }
        -: 1562:
        -: 1563:  ThreadLocalValueHolderBase* NewValueForCurrentThread() const override {
        -: 1564:    return default_factory_->MakeNewHolder();
        -: 1565:  }
        -: 1566:
        -: 1567:  class ValueHolderFactory {
        -: 1568:   public:
        -: 1569:    ValueHolderFactory() {}
        -: 1570:    virtual ~ValueHolderFactory() {}
        -: 1571:    virtual ValueHolder* MakeNewHolder() const = 0;
        -: 1572:
        -: 1573:   private:
        -: 1574:    ValueHolderFactory(const ValueHolderFactory&) = delete;
        -: 1575:    ValueHolderFactory& operator=(const ValueHolderFactory&) = delete;
        -: 1576:  };
        -: 1577:
        -: 1578:  class DefaultValueHolderFactory : public ValueHolderFactory {
        -: 1579:   public:
        -: 1580:    DefaultValueHolderFactory() {}
        -: 1581:    ValueHolder* MakeNewHolder() const override { return new ValueHolder(); }
        -: 1582:
        -: 1583:   private:
        -: 1584:    DefaultValueHolderFactory(const DefaultValueHolderFactory&) = delete;
        -: 1585:    DefaultValueHolderFactory& operator=(const DefaultValueHolderFactory&) =
        -: 1586:        delete;
        -: 1587:  };
        -: 1588:
        -: 1589:  class InstanceValueHolderFactory : public ValueHolderFactory {
        -: 1590:   public:
        -: 1591:    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
        -: 1592:    ValueHolder* MakeNewHolder() const override {
        -: 1593:      return new ValueHolder(value_);
        -: 1594:    }
        -: 1595:
        -: 1596:   private:
        -: 1597:    const T value_;  // The value for each thread.
        -: 1598:
        -: 1599:    InstanceValueHolderFactory(const InstanceValueHolderFactory&) = delete;
        -: 1600:    InstanceValueHolderFactory& operator=(const InstanceValueHolderFactory&) =
        -: 1601:        delete;
        -: 1602:  };
        -: 1603:
        -: 1604:  std::unique_ptr<ValueHolderFactory> default_factory_;
        -: 1605:
        -: 1606:  ThreadLocal(const ThreadLocal&) = delete;
        -: 1607:  ThreadLocal& operator=(const ThreadLocal&) = delete;
        -: 1608:};
        -: 1609:
        -: 1610:#elif GTEST_HAS_PTHREAD
        -: 1611:
        -: 1612:// MutexBase and Mutex implement mutex on pthreads-based platforms.
        -: 1613:class MutexBase {
        -: 1614: public:
        -: 1615:  // Acquires this mutex.
function _ZN7testing8internal9MutexBase4LockEv called 0 returned 0% blocks executed 0%
    #####: 1616:  void Lock() {
    #####: 1617:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&mutex_));
    %%%%%: 1617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1617-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1617-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1617-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 1617-block  4
call   14 never executed
    $$$$$: 1617-block  5
call   15 never executed
    #####: 1618:    owner_ = pthread_self();
    #####: 1619:    has_owner_ = true;
    #####: 1620:  }
    %%%%%: 1620-block  0
        -: 1621:
        -: 1622:  // Releases this mutex.
function _ZN7testing8internal9MutexBase6UnlockEv called 0 returned 0% blocks executed 0%
    #####: 1623:  void Unlock() {
        -: 1624:    // Since the lock is being released the owner_ field should no longer be
        -: 1625:    // considered valid. We don't protect writing to has_owner_ here, as it's
        -: 1626:    // the caller's responsibility to ensure that the current thread holds the
        -: 1627:    // mutex when this is called.
    #####: 1628:    has_owner_ = false;
    #####: 1629:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&mutex_));
    %%%%%: 1629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1629-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1629-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1629-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 1629-block  4
call   14 never executed
    $$$$$: 1629-block  5
call   15 never executed
    #####: 1630:  }
    %%%%%: 1630-block  0
        -: 1631:
        -: 1632:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1633:  // with high probability.
        -: 1634:  void AssertHeld() const {
        -: 1635:    GTEST_CHECK_(has_owner_ && pthread_equal(owner_, pthread_self()))
        -: 1636:        << "The current thread is not holding the mutex @" << this;
        -: 1637:  }
        -: 1638:
        -: 1639:  // A static mutex may be used before main() is entered.  It may even
        -: 1640:  // be used before the dynamic initialization stage.  Therefore we
        -: 1641:  // must be able to initialize a static mutex object at link time.
        -: 1642:  // This means MutexBase has to be a POD and its member variables
        -: 1643:  // have to be public.
        -: 1644: public:
        -: 1645:  pthread_mutex_t mutex_;  // The underlying pthread mutex.
        -: 1646:  // has_owner_ indicates whether the owner_ field below contains a valid thread
        -: 1647:  // ID and is therefore safe to inspect (e.g., to use in pthread_equal()). All
        -: 1648:  // accesses to the owner_ field should be protected by a check of this field.
        -: 1649:  // An alternative might be to memset() owner_ to all zeros, but there's no
        -: 1650:  // guarantee that a zero'd pthread_t is necessarily invalid or even different
        -: 1651:  // from pthread_self().
        -: 1652:  bool has_owner_;
        -: 1653:  pthread_t owner_;  // The thread holding the mutex.
        -: 1654:};
        -: 1655:
        -: 1656:// Forward-declares a static mutex.
        -: 1657:#define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1658:  extern ::testing::internal::MutexBase mutex
        -: 1659:
        -: 1660:// Defines and statically (i.e. at link time) initializes a static mutex.
        -: 1661:// The initialization list here does not explicitly initialize each field,
        -: 1662:// instead relying on default initialization for the unspecified fields. In
        -: 1663:// particular, the owner_ field (a pthread_t) is not explicitly initialized.
        -: 1664:// This allows initialization to work whether pthread_t is a scalar or struct.
        -: 1665:// The flag -Wmissing-field-initializers must not be specified for this to work.
        -: 1666:#define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1667:  ::testing::internal::MutexBase mutex = {PTHREAD_MUTEX_INITIALIZER, false, 0}
        -: 1668:
        -: 1669:// The Mutex class can only be used for mutexes created at runtime. It
        -: 1670:// shares its API with MutexBase otherwise.
        -: 1671:class Mutex : public MutexBase {
        -: 1672: public:
function _ZN7testing8internal5MutexC2Ev called 39 returned 100% blocks executed 31%
       39: 1673:  Mutex() {
      39*: 1674:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, nullptr));
       39: 1674-block  0
call    0 returned 39
branch  1 taken 0 (fallthrough)
branch  2 taken 39
    %%%%%: 1674-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1674-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1674-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 1674-block  4
call   14 never executed
    $$$$$: 1674-block  5
call   15 never executed
       39: 1675:    has_owner_ = false;
       39: 1676:  }
       39: 1676-block  0
function _ZN7testing8internal5MutexD2Ev called 39 returned 100% blocks executed 30%
      39*: 1677:  ~Mutex() { GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&mutex_)); }
       39: 1677-block  0
call    0 returned 39
branch  1 taken 0 (fallthrough)
branch  2 taken 39
    %%%%%: 1677-block  1
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 1678:
        -: 1679: private:
        -: 1680:  Mutex(const Mutex&) = delete;
        -: 1681:  Mutex& operator=(const Mutex&) = delete;
        -: 1682:};
        -: 1683:
        -: 1684:// We cannot name this class MutexLock because the ctor declaration would
        -: 1685:// conflict with a macro named MutexLock, which is defined on some
        -: 1686:// platforms. That macro is used as a defensive measure to prevent against
        -: 1687:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1688:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1689:class GTestMutexLock {
        -: 1690: public:
function _ZN7testing8internal14GTestMutexLockC2EPNS0_9MutexBaseE called 0 returned 0% blocks executed 0%
    #####: 1691:  explicit GTestMutexLock(MutexBase* mutex) : mutex_(mutex) { mutex_->Lock(); }
    %%%%%: 1691-block  0
call    0 never executed
        -: 1692:
function _ZN7testing8internal14GTestMutexLockD2Ev called 0 returned 0% blocks executed 0%
    #####: 1693:  ~GTestMutexLock() { mutex_->Unlock(); }
    %%%%%: 1693-block  0
call    0 never executed
        -: 1694:
        -: 1695: private:
        -: 1696:  MutexBase* const mutex_;
        -: 1697:
        -: 1698:  GTestMutexLock(const GTestMutexLock&) = delete;
        -: 1699:  GTestMutexLock& operator=(const GTestMutexLock&) = delete;
        -: 1700:};
        -: 1701:
        -: 1702:typedef GTestMutexLock MutexLock;
        -: 1703:
        -: 1704:// Helpers for ThreadLocal.
        -: 1705:
        -: 1706:// pthread_key_create() requires DeleteThreadLocalValue() to have
        -: 1707:// C-linkage.  Therefore it cannot be templatized to access
        -: 1708:// ThreadLocal<T>.  Hence the need for class
        -: 1709:// ThreadLocalValueHolderBase.
        -: 1710:class GTEST_API_ ThreadLocalValueHolderBase {
        -: 1711: public:
    #####: 1712:  virtual ~ThreadLocalValueHolderBase() {}
------------------
_ZN7testing8internal26ThreadLocalValueHolderBaseD0Ev:
function _ZN7testing8internal26ThreadLocalValueHolderBaseD0Ev called 0 returned 0% blocks executed 0%
    #####: 1712:  virtual ~ThreadLocalValueHolderBase() {}
    %%%%%: 1712-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal26ThreadLocalValueHolderBaseD2Ev:
function _ZN7testing8internal26ThreadLocalValueHolderBaseD2Ev called 0 returned 0% blocks executed 0%
    #####: 1712:  virtual ~ThreadLocalValueHolderBase() {}
------------------
        -: 1713:};
        -: 1714:
        -: 1715:// Called by pthread to delete thread-local data stored by
        -: 1716:// pthread_setspecific().
function DeleteThreadLocalValue called 2 returned 100% blocks executed 67%
        2: 1717:extern "C" inline void DeleteThreadLocalValue(void* value_holder) {
       2*: 1718:  delete static_cast<ThreadLocalValueHolderBase*>(value_holder);
        2: 1718-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1718-block  1
call    2 never executed
        2: 1719:}
        -: 1720:
        -: 1721:// Implements thread-local storage on pthreads-based systems.
        -: 1722:template <typename T>
        -: 1723:class GTEST_API_ ThreadLocal {
        -: 1724: public:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEEC2Ev called 1 returned 100% blocks executed 86%
        1: 1725:  ThreadLocal()
        1: 1726:      : key_(CreateKey()), default_factory_(new DefaultValueHolderFactory()) {}
        1: 1726-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 1726-block  1
call    5 returned 1
    $$$$$: 1726-block  2
call    6 never executed
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEEC2ERKS3_ called 1 returned 100% blocks executed 86%
        1: 1727:  explicit ThreadLocal(const T& value)
        1: 1728:      : key_(CreateKey()),
        1: 1728-block  0
call    0 returned 1
        1: 1729:        default_factory_(new InstanceValueHolderFactory(value)) {}
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 1729-block  0
call    4 returned 1
    $$$$$: 1729-block  1
call    5 never executed
        -: 1730:
        2: 1731:  ~ThreadLocal() {
        -: 1732:    // Destroys the managed object for the current thread, if any.
        2: 1733:    DeleteThreadLocalValue(pthread_getspecific(key_));
        -: 1734:
        -: 1735:    // Releases resources associated with the key.  This will *not*
        -: 1736:    // delete managed objects for other threads.
       2*: 1737:    GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));
        2: 1738:  }
------------------
_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEED2Ev:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEED2Ev called 1 returned 100% blocks executed 46%
        1: 1731:  ~ThreadLocal() {
        -: 1732:    // Destroys the managed object for the current thread, if any.
        1: 1733:    DeleteThreadLocalValue(pthread_getspecific(key_));
        1: 1733-block  0
call    0 returned 1
call    1 returned 1
        -: 1734:
        -: 1735:    // Releases resources associated with the key.  This will *not*
        -: 1736:    // delete managed objects for other threads.
       1*: 1737:    GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 1737-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        1: 1738:  }
        1: 1738-block  0
call    0 returned 1
------------------
_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEED2Ev:
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEED2Ev called 1 returned 100% blocks executed 46%
        1: 1731:  ~ThreadLocal() {
        -: 1732:    // Destroys the managed object for the current thread, if any.
        1: 1733:    DeleteThreadLocalValue(pthread_getspecific(key_));
        1: 1733-block  0
call    0 returned 1
call    1 returned 1
        -: 1734:
        -: 1735:    // Releases resources associated with the key.  This will *not*
        -: 1736:    // delete managed objects for other threads.
       1*: 1737:    GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 1737-block  0
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        1: 1738:  }
        1: 1738-block  0
call    0 returned 1
------------------
        -: 1739:
    #####: 1740:  T* pointer() { return GetOrCreateValue(); }
------------------
_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE7pointerEv:
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE7pointerEv called 0 returned 0% blocks executed 0%
    #####: 1740:  T* pointer() { return GetOrCreateValue(); }
    %%%%%: 1740-block  0
call    0 never executed
------------------
_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE7pointerEv:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE7pointerEv called 0 returned 0% blocks executed 0%
    #####: 1740:  T* pointer() { return GetOrCreateValue(); }
    %%%%%: 1740-block  0
call    0 never executed
------------------
function _ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE7pointerEv called 0 returned 0% blocks executed 0%
    #####: 1741:  const T* pointer() const { return GetOrCreateValue(); }
    %%%%%: 1741-block  0
call    0 never executed
function _ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE3getEv called 0 returned 0% blocks executed 0%
    #####: 1742:  const T& get() const { return *pointer(); }
    %%%%%: 1742-block  0
call    0 never executed
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE3setERKS3_ called 0 returned 0% blocks executed 0%
    #####: 1743:  void set(const T& value) { *pointer() = value; }
    %%%%%: 1743-block  0
call    0 never executed
        -: 1744:
        -: 1745: private:
        -: 1746:  // Holds a value of type T.
        -: 1747:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 1748:   public:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE11ValueHolderC2Ev called 0 returned 0% blocks executed 0%
    #####: 1749:    ValueHolder() : value_() {}
    %%%%%: 1749-block  0
call    0 never executed
call    1 never executed
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE11ValueHolderC2ERKS3_ called 0 returned 0% blocks executed 0%
    #####: 1750:    explicit ValueHolder(const T& value) : value_(value) {}
    %%%%%: 1750-block  0
call    0 never executed
        -: 1751:
    #####: 1752:    T* pointer() { return &value_; }
------------------
_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE11ValueHolder7pointerEv:
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE11ValueHolder7pointerEv called 0 returned 0% blocks executed 0%
    #####: 1752:    T* pointer() { return &value_; }
    %%%%%: 1752-block  0
------------------
_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE11ValueHolder7pointerEv:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE11ValueHolder7pointerEv called 0 returned 0% blocks executed 0%
    #####: 1752:    T* pointer() { return &value_; }
    %%%%%: 1752-block  0
------------------
        -: 1753:
        -: 1754:   private:
        -: 1755:    T value_;
        -: 1756:    ValueHolder(const ValueHolder&) = delete;
        -: 1757:    ValueHolder& operator=(const ValueHolder&) = delete;
        -: 1758:  };
        -: 1759:
        2: 1760:  static pthread_key_t CreateKey() {
        -: 1761:    pthread_key_t key;
        -: 1762:    // When a thread exits, DeleteThreadLocalValue() will be called on
        -: 1763:    // the object managed for that thread.
       2*: 1764:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1765:        pthread_key_create(&key, &DeleteThreadLocalValue));
        2: 1766:    return key;
        -: 1767:  }
------------------
_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE9CreateKeyEv:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE9CreateKeyEv called 1 returned 100% blocks executed 33%
        1: 1760:  static pthread_key_t CreateKey() {
        -: 1761:    pthread_key_t key;
        -: 1762:    // When a thread exits, DeleteThreadLocalValue() will be called on
        -: 1763:    // the object managed for that thread.
       1*: 1764:    GTEST_CHECK_POSIX_SUCCESS_(
        1: 1764-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 1764-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1764-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1764-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1764-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1764-block  5
call   16 never executed
    $$$$$: 1764-block  6
call   17 never executed
    $$$$$: 1764-block  7
        -: 1765:        pthread_key_create(&key, &DeleteThreadLocalValue));
        1: 1766:    return key;
        1: 1766-block  0
        1: 1766-block  1
        -: 1767:  }
------------------
_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE9CreateKeyEv:
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE9CreateKeyEv called 1 returned 100% blocks executed 33%
        1: 1760:  static pthread_key_t CreateKey() {
        -: 1761:    pthread_key_t key;
        -: 1762:    // When a thread exits, DeleteThreadLocalValue() will be called on
        -: 1763:    // the object managed for that thread.
       1*: 1764:    GTEST_CHECK_POSIX_SUCCESS_(
        1: 1764-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 1764-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1764-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1764-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1764-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1764-block  5
call   16 never executed
    $$$$$: 1764-block  6
call   17 never executed
    $$$$$: 1764-block  7
        -: 1765:        pthread_key_create(&key, &DeleteThreadLocalValue));
        1: 1766:    return key;
        1: 1766-block  0
        1: 1766-block  1
        -: 1767:  }
------------------
        -: 1768:
    #####: 1769:  T* GetOrCreateValue() const {
        -: 1770:    ThreadLocalValueHolderBase* const holder =
    #####: 1771:        static_cast<ThreadLocalValueHolderBase*>(pthread_getspecific(key_));
    #####: 1772:    if (holder != nullptr) {
    #####: 1773:      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();
        -: 1774:    }
        -: 1775:
    #####: 1776:    ValueHolder* const new_holder = default_factory_->MakeNewHolder();
    #####: 1777:    ThreadLocalValueHolderBase* const holder_base = new_holder;
    #####: 1778:    GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));
    #####: 1779:    return new_holder->pointer();
        -: 1780:  }
------------------
_ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE16GetOrCreateValueEv:
function _ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE16GetOrCreateValueEv called 0 returned 0% blocks executed 0%
    #####: 1769:  T* GetOrCreateValue() const {
        -: 1770:    ThreadLocalValueHolderBase* const holder =
    #####: 1771:        static_cast<ThreadLocalValueHolderBase*>(pthread_getspecific(key_));
    %%%%%: 1771-block  0
call    0 never executed
    #####: 1772:    if (holder != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 1773:      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();
    %%%%%: 1773-block  0
call    0 never executed
call    1 never executed
        -: 1774:    }
        -: 1775:
    #####: 1776:    ValueHolder* const new_holder = default_factory_->MakeNewHolder();
    %%%%%: 1776-block  0
call    0 never executed
call    1 never executed
    #####: 1777:    ThreadLocalValueHolderBase* const holder_base = new_holder;
    #####: 1778:    GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1778-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1778-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1778-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 1778-block  3
call   14 never executed
    $$$$$: 1778-block  4
call   15 never executed
    #####: 1779:    return new_holder->pointer();
    %%%%%: 1779-block  0
call    0 never executed
        -: 1780:  }
------------------
_ZNK7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE16GetOrCreateValueEv:
function _ZNK7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE16GetOrCreateValueEv called 0 returned 0% blocks executed 0%
    #####: 1769:  T* GetOrCreateValue() const {
        -: 1770:    ThreadLocalValueHolderBase* const holder =
    #####: 1771:        static_cast<ThreadLocalValueHolderBase*>(pthread_getspecific(key_));
    %%%%%: 1771-block  0
call    0 never executed
    #####: 1772:    if (holder != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 1773:      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();
    %%%%%: 1773-block  0
call    0 never executed
call    1 never executed
        -: 1774:    }
        -: 1775:
    #####: 1776:    ValueHolder* const new_holder = default_factory_->MakeNewHolder();
    %%%%%: 1776-block  0
call    0 never executed
call    1 never executed
    #####: 1777:    ThreadLocalValueHolderBase* const holder_base = new_holder;
    #####: 1778:    GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1778-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1778-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1778-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 1778-block  3
call   14 never executed
    $$$$$: 1778-block  4
call   15 never executed
    #####: 1779:    return new_holder->pointer();
    %%%%%: 1779-block  0
call    0 never executed
        -: 1780:  }
------------------
        -: 1781:
        -: 1782:  class ValueHolderFactory {
        -: 1783:   public:
        2: 1784:    ValueHolderFactory() {}
------------------
_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE18ValueHolderFactoryC2Ev:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE18ValueHolderFactoryC2Ev called 1 returned 100% blocks executed 100%
        1: 1784:    ValueHolderFactory() {}
------------------
_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE18ValueHolderFactoryC2Ev:
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE18ValueHolderFactoryC2Ev called 1 returned 100% blocks executed 100%
        1: 1784:    ValueHolderFactory() {}
------------------
       2*: 1785:    virtual ~ValueHolderFactory() {}
------------------
_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE18ValueHolderFactoryD0Ev:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE18ValueHolderFactoryD0Ev called 0 returned 0% blocks executed 0%
    #####: 1785:    virtual ~ValueHolderFactory() {}
    %%%%%: 1785-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE18ValueHolderFactoryD2Ev:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE18ValueHolderFactoryD2Ev called 1 returned 100% blocks executed 100%
        1: 1785:    virtual ~ValueHolderFactory() {}
------------------
_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE18ValueHolderFactoryD0Ev:
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE18ValueHolderFactoryD0Ev called 0 returned 0% blocks executed 0%
    #####: 1785:    virtual ~ValueHolderFactory() {}
    %%%%%: 1785-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE18ValueHolderFactoryD2Ev:
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE18ValueHolderFactoryD2Ev called 1 returned 100% blocks executed 100%
        1: 1785:    virtual ~ValueHolderFactory() {}
------------------
        -: 1786:    virtual ValueHolder* MakeNewHolder() const = 0;
        -: 1787:
        -: 1788:   private:
        -: 1789:    ValueHolderFactory(const ValueHolderFactory&) = delete;
        -: 1790:    ValueHolderFactory& operator=(const ValueHolderFactory&) = delete;
        -: 1791:  };
        -: 1792:
        -: 1793:  class DefaultValueHolderFactory : public ValueHolderFactory {
        -: 1794:   public:
function _ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE25DefaultValueHolderFactoryC2Ev called 1 returned 100% blocks executed 100%
        1: 1795:    DefaultValueHolderFactory() {}
        1: 1795-block  0
call    0 returned 1
function _ZNK7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE25DefaultValueHolderFactory13MakeNewHolderEv called 0 returned 0% blocks executed 0%
    #####: 1796:    ValueHolder* MakeNewHolder() const override { return new ValueHolder(); }
    %%%%%: 1796-block  0
call    0 never executed
call    1 never executed
        -: 1797:
        -: 1798:   private:
        -: 1799:    DefaultValueHolderFactory(const DefaultValueHolderFactory&) = delete;
        -: 1800:    DefaultValueHolderFactory& operator=(const DefaultValueHolderFactory&) =
        -: 1801:        delete;
        -: 1802:  };
        -: 1803:
        -: 1804:  class InstanceValueHolderFactory : public ValueHolderFactory {
        -: 1805:   public:
function _ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE26InstanceValueHolderFactoryC2ERKS3_ called 1 returned 100% blocks executed 100%
        1: 1806:    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
        1: 1806-block  0
call    0 returned 1
function _ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE26InstanceValueHolderFactory13MakeNewHolderEv called 0 returned 0% blocks executed 0%
    #####: 1807:    ValueHolder* MakeNewHolder() const override {
    #####: 1808:      return new ValueHolder(value_);
    %%%%%: 1808-block  0
call    0 never executed
call    1 never executed
        -: 1809:    }
        -: 1810:
        -: 1811:   private:
        -: 1812:    const T value_;  // The value for each thread.
        -: 1813:
        -: 1814:    InstanceValueHolderFactory(const InstanceValueHolderFactory&) = delete;
        -: 1815:    InstanceValueHolderFactory& operator=(const InstanceValueHolderFactory&) =
        -: 1816:        delete;
        -: 1817:  };
        -: 1818:
        -: 1819:  // A key pthreads uses for looking up per-thread values.
        -: 1820:  const pthread_key_t key_;
        -: 1821:  std::unique_ptr<ValueHolderFactory> default_factory_;
        -: 1822:
        -: 1823:  ThreadLocal(const ThreadLocal&) = delete;
        -: 1824:  ThreadLocal& operator=(const ThreadLocal&) = delete;
        -: 1825:};
        -: 1826:
        -: 1827:#endif  // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1828:
        -: 1829:#else  // GTEST_IS_THREADSAFE
        -: 1830:
        -: 1831:// A dummy implementation of synchronization primitives (mutex, lock,
        -: 1832:// and thread-local variable).  Necessary for compiling Google Test where
        -: 1833:// mutex is not supported - using Google Test in multiple threads is not
        -: 1834:// supported on such platforms.
        -: 1835:
        -: 1836:class Mutex {
        -: 1837: public:
        -: 1838:  Mutex() {}
        -: 1839:  void Lock() {}
        -: 1840:  void Unlock() {}
        -: 1841:  void AssertHeld() const {}
        -: 1842:};
        -: 1843:
        -: 1844:#define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1845:  extern ::testing::internal::Mutex mutex
        -: 1846:
        -: 1847:#define GTEST_DEFINE_STATIC_MUTEX_(mutex) ::testing::internal::Mutex mutex
        -: 1848:
        -: 1849:// We cannot name this class MutexLock because the ctor declaration would
        -: 1850:// conflict with a macro named MutexLock, which is defined on some
        -: 1851:// platforms. That macro is used as a defensive measure to prevent against
        -: 1852:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1853:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1854:class GTestMutexLock {
        -: 1855: public:
        -: 1856:  explicit GTestMutexLock(Mutex*) {}  // NOLINT
        -: 1857:};
        -: 1858:
        -: 1859:typedef GTestMutexLock MutexLock;
        -: 1860:
        -: 1861:template <typename T>
        -: 1862:class GTEST_API_ ThreadLocal {
        -: 1863: public:
        -: 1864:  ThreadLocal() : value_() {}
        -: 1865:  explicit ThreadLocal(const T& value) : value_(value) {}
        -: 1866:  T* pointer() { return &value_; }
        -: 1867:  const T* pointer() const { return &value_; }
        -: 1868:  const T& get() const { return value_; }
        -: 1869:  void set(const T& value) { value_ = value; }
        -: 1870:
        -: 1871: private:
        -: 1872:  T value_;
        -: 1873:};
        -: 1874:
        -: 1875:#endif  // GTEST_IS_THREADSAFE
        -: 1876:
        -: 1877:// Returns the number of threads running in the process, or 0 to indicate that
        -: 1878:// we cannot detect it.
        -: 1879:GTEST_API_ size_t GetThreadCount();
        -: 1880:
        -: 1881:#if GTEST_OS_WINDOWS
        -: 1882:#define GTEST_PATH_SEP_ "\\"
        -: 1883:#define GTEST_HAS_ALT_PATH_SEP_ 1
        -: 1884:#else
        -: 1885:#define GTEST_PATH_SEP_ "/"
        -: 1886:#define GTEST_HAS_ALT_PATH_SEP_ 0
        -: 1887:#endif  // GTEST_OS_WINDOWS
        -: 1888:
        -: 1889:// Utilities for char.
        -: 1890:
        -: 1891:// isspace(int ch) and friends accept an unsigned char or EOF.  char
        -: 1892:// may be signed, depending on the compiler (or compiler flags).
        -: 1893:// Therefore we need to cast a char to unsigned char before calling
        -: 1894:// isspace(), etc.
        -: 1895:
        -: 1896:inline bool IsAlpha(char ch) {
        -: 1897:  return isalpha(static_cast<unsigned char>(ch)) != 0;
        -: 1898:}
        -: 1899:inline bool IsAlNum(char ch) {
        -: 1900:  return isalnum(static_cast<unsigned char>(ch)) != 0;
        -: 1901:}
function _ZN7testing8internal7IsDigitEc called 0 returned 0% blocks executed 0%
    #####: 1902:inline bool IsDigit(char ch) {
    #####: 1903:  return isdigit(static_cast<unsigned char>(ch)) != 0;
    %%%%%: 1903-block  0
        -: 1904:}
        -: 1905:inline bool IsLower(char ch) {
        -: 1906:  return islower(static_cast<unsigned char>(ch)) != 0;
        -: 1907:}
function _ZN7testing8internal7IsSpaceEc called 0 returned 0% blocks executed 0%
    #####: 1908:inline bool IsSpace(char ch) {
    #####: 1909:  return isspace(static_cast<unsigned char>(ch)) != 0;
    %%%%%: 1909-block  0
        -: 1910:}
        -: 1911:inline bool IsUpper(char ch) {
        -: 1912:  return isupper(static_cast<unsigned char>(ch)) != 0;
        -: 1913:}
function _ZN7testing8internal8IsXDigitEc called 0 returned 0% blocks executed 0%
    #####: 1914:inline bool IsXDigit(char ch) {
    #####: 1915:  return isxdigit(static_cast<unsigned char>(ch)) != 0;
    %%%%%: 1915-block  0
        -: 1916:}
        -: 1917:#ifdef __cpp_char8_t
function _ZN7testing8internal8IsXDigitEDu called 0 returned 0% blocks executed 0%
    #####: 1918:inline bool IsXDigit(char8_t ch) {
    #####: 1919:  return isxdigit(static_cast<unsigned char>(ch)) != 0;
    %%%%%: 1919-block  0
        -: 1920:}
        -: 1921:#endif
function _ZN7testing8internal8IsXDigitEDs called 0 returned 0% blocks executed 0%
    #####: 1922:inline bool IsXDigit(char16_t ch) {
    #####: 1923:  const unsigned char low_byte = static_cast<unsigned char>(ch);
    #####: 1924:  return ch == low_byte && isxdigit(low_byte) != 0;
    %%%%%: 1924-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1924-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1924-block  2
    %%%%%: 1924-block  3
    %%%%%: 1924-block  4
        -: 1925:}
function _ZN7testing8internal8IsXDigitEDi called 0 returned 0% blocks executed 0%
    #####: 1926:inline bool IsXDigit(char32_t ch) {
    #####: 1927:  const unsigned char low_byte = static_cast<unsigned char>(ch);
    #####: 1928:  return ch == low_byte && isxdigit(low_byte) != 0;
    %%%%%: 1928-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1928-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1928-block  2
    %%%%%: 1928-block  3
    %%%%%: 1928-block  4
        -: 1929:}
function _ZN7testing8internal8IsXDigitEw called 0 returned 0% blocks executed 0%
    #####: 1930:inline bool IsXDigit(wchar_t ch) {
    #####: 1931:  const unsigned char low_byte = static_cast<unsigned char>(ch);
    #####: 1932:  return ch == low_byte && isxdigit(low_byte) != 0;
    %%%%%: 1932-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1932-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1932-block  2
    %%%%%: 1932-block  3
    %%%%%: 1932-block  4
        -: 1933:}
        -: 1934:
        -: 1935:inline char ToLower(char ch) {
        -: 1936:  return static_cast<char>(tolower(static_cast<unsigned char>(ch)));
        -: 1937:}
function _ZN7testing8internal7ToUpperEc called 414 returned 100% blocks executed 100%
      414: 1938:inline char ToUpper(char ch) {
      414: 1939:  return static_cast<char>(toupper(static_cast<unsigned char>(ch)));
      414: 1939-block  0
        -: 1940:}
        -: 1941:
function _ZN7testing8internal19StripTrailingSpacesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1942:inline std::string StripTrailingSpaces(std::string str) {
    #####: 1943:  std::string::iterator it = str.end();
    %%%%%: 1943-block  0
call    0 never executed
    #####: 1944:  while (it != str.begin() && IsSpace(*--it)) it = str.erase(it);
    %%%%%: 1944-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1944-block  1
    %%%%%: 1944-block  2
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1944-block  3
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1944-block  4
    %%%%%: 1944-block  5
    %%%%%: 1944-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 1944-block  7
    #####: 1945:  return str;
    %%%%%: 1945-block  0
call    0 never executed
    %%%%%: 1945-block  1
        -: 1946:}
        -: 1947:
        -: 1948:// The testing::internal::posix namespace holds wrappers for common
        -: 1949:// POSIX functions.  These wrappers hide the differences between
        -: 1950:// Windows/MSVC and POSIX systems.  Since some compilers define these
        -: 1951:// standard functions as macros, the wrapper cannot have the same name
        -: 1952:// as the wrapped function.
        -: 1953:
        -: 1954:namespace posix {
        -: 1955:
        -: 1956:// Functions with a different name on Windows.
        -: 1957:
        -: 1958:#if GTEST_OS_WINDOWS
        -: 1959:
        -: 1960:typedef struct _stat StatStruct;
        -: 1961:
        -: 1962:#ifdef __BORLANDC__
        -: 1963:inline int DoIsATTY(int fd) { return isatty(fd); }
        -: 1964:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1965:  return stricmp(s1, s2);
        -: 1966:}
        -: 1967:inline char* StrDup(const char* src) { return strdup(src); }
        -: 1968:#else  // !__BORLANDC__
        -: 1969:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS || GTEST_OS_IOS || \
        -: 1970:    GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT || defined(ESP_PLATFORM)
        -: 1971:inline int DoIsATTY(int /* fd */) { return 0; }
        -: 1972:#else
        -: 1973:inline int DoIsATTY(int fd) { return _isatty(fd); }
        -: 1974:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1975:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1976:  return _stricmp(s1, s2);
        -: 1977:}
        -: 1978:inline char* StrDup(const char* src) { return _strdup(src); }
        -: 1979:#endif  // __BORLANDC__
        -: 1980:
        -: 1981:#if GTEST_OS_WINDOWS_MOBILE
        -: 1982:inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }
        -: 1983:// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this
        -: 1984:// time and thus not defined there.
        -: 1985:#else
        -: 1986:inline int FileNo(FILE* file) { return _fileno(file); }
        -: 1987:inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }
        -: 1988:inline int RmDir(const char* dir) { return _rmdir(dir); }
        -: 1989:inline bool IsDir(const StatStruct& st) { return (_S_IFDIR & st.st_mode) != 0; }
        -: 1990:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1991:
        -: 1992:#elif GTEST_OS_ESP8266
        -: 1993:typedef struct stat StatStruct;
        -: 1994:
        -: 1995:inline int FileNo(FILE* file) { return fileno(file); }
        -: 1996:inline int DoIsATTY(int fd) { return isatty(fd); }
        -: 1997:inline int Stat(const char* path, StatStruct* buf) {
        -: 1998:  // stat function not implemented on ESP8266
        -: 1999:  return 0;
        -: 2000:}
        -: 2001:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 2002:  return strcasecmp(s1, s2);
        -: 2003:}
        -: 2004:inline char* StrDup(const char* src) { return strdup(src); }
        -: 2005:inline int RmDir(const char* dir) { return rmdir(dir); }
        -: 2006:inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
        -: 2007:
        -: 2008:#else
        -: 2009:
        -: 2010:typedef struct stat StatStruct;
        -: 2011:
function _ZN7testing8internal5posix6FileNoEP8_IO_FILE called 1 returned 100% blocks executed 100%
        1: 2012:inline int FileNo(FILE* file) { return fileno(file); }
        1: 2012-block  0
call    0 returned 1
function _ZN7testing8internal5posix8DoIsATTYEi called 1 returned 100% blocks executed 100%
        1: 2013:inline int DoIsATTY(int fd) { return isatty(fd); }
        1: 2013-block  0
call    0 returned 1
function _ZN7testing8internal5posix4StatEPKcP4stat called 0 returned 0% blocks executed 0%
    #####: 2014:inline int Stat(const char* path, StatStruct* buf) { return stat(path, buf); }
    %%%%%: 2014-block  0
call    0 never executed
function _ZN7testing8internal5posix10StrCaseCmpEPKcS3_ called 4 returned 100% blocks executed 100%
        4: 2015:inline int StrCaseCmp(const char* s1, const char* s2) {
        4: 2016:  return strcasecmp(s1, s2);
        4: 2016-block  0
        -: 2017:}
function _ZN7testing8internal5posix6StrDupEPKc called 0 returned 0% blocks executed 0%
    #####: 2018:inline char* StrDup(const char* src) { return strdup(src); }
    %%%%%: 2018-block  0
call    0 never executed
        -: 2019:#if GTEST_OS_QURT
        -: 2020:// QuRT doesn't support any directory functions, including rmdir
        -: 2021:inline int RmDir(const char*) { return 0; }
        -: 2022:#else
        -: 2023:inline int RmDir(const char* dir) { return rmdir(dir); }
        -: 2024:#endif
function _ZN7testing8internal5posix5IsDirERK4stat called 0 returned 0% blocks executed 0%
    #####: 2025:inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
    %%%%%: 2025-block  0
        -: 2026:
        -: 2027:#endif  // GTEST_OS_WINDOWS
        -: 2028:
function _ZN7testing8internal5posix6IsATTYEi called 1 returned 100% blocks executed 100%
        1: 2029:inline int IsATTY(int fd) {
        -: 2030:  // DoIsATTY might change errno (for example ENOTTY in case you redirect stdout
        -: 2031:  // to a file on Linux), which is unexpected, so save the previous value, and
        -: 2032:  // restore it after the call.
        1: 2033:  int savedErrno = errno;
        1: 2034:  int isAttyValue = DoIsATTY(fd);
        1: 2034-block  0
call    0 returned 1
        1: 2035:  errno = savedErrno;
        -: 2036:
        1: 2037:  return isAttyValue;
        -: 2038:}
        -: 2039:
        -: 2040:// Functions deprecated by MSVC 8.0.
        -: 2041:
        -: 2042:GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
        -: 2043:
        -: 2044:// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and
        -: 2045:// StrError() aren't needed on Windows CE at this time and thus not
        -: 2046:// defined there.
        -: 2047:
        -: 2048:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE &&           \
        -: 2049:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_ESP8266 && !GTEST_OS_XTENSA && \
        -: 2050:    !GTEST_OS_QURT
        -: 2051:inline int ChDir(const char* dir) { return chdir(dir); }
        -: 2052:#endif
function _ZN7testing8internal5posix5FOpenEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 2053:inline FILE* FOpen(const char* path, const char* mode) {
        -: 2054:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2055:  struct wchar_codecvt : public std::codecvt<wchar_t, char, std::mbstate_t> {};
        -: 2056:  std::wstring_convert<wchar_codecvt> converter;
        -: 2057:  std::wstring wide_path = converter.from_bytes(path);
        -: 2058:  std::wstring wide_mode = converter.from_bytes(mode);
        -: 2059:  return _wfopen(wide_path.c_str(), wide_mode.c_str());
        -: 2060:#else   // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
    #####: 2061:  return fopen(path, mode);
    %%%%%: 2061-block  0
call    0 never executed
        -: 2062:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2063:}
        -: 2064:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_QURT
        -: 2065:inline FILE* FReopen(const char* path, const char* mode, FILE* stream) {
        -: 2066:  return freopen(path, mode, stream);
        -: 2067:}
function _ZN7testing8internal5posix6FDOpenEiPKc called 0 returned 0% blocks executed 0%
    #####: 2068:inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }
    %%%%%: 2068-block  0
call    0 never executed
        -: 2069:#endif
function _ZN7testing8internal5posix6FCloseEP8_IO_FILE called 0 returned 0% blocks executed 0%
    #####: 2070:inline int FClose(FILE* fp) { return fclose(fp); }
    %%%%%: 2070-block  0
call    0 never executed
        -: 2071:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_QURT
function _ZN7testing8internal5posix4ReadEiPvj called 0 returned 0% blocks executed 0%
    #####: 2072:inline int Read(int fd, void* buf, unsigned int count) {
    #####: 2073:  return static_cast<int>(read(fd, buf, count));
    %%%%%: 2073-block  0
call    0 never executed
        -: 2074:}
function _ZN7testing8internal5posix5WriteEiPKvj called 0 returned 0% blocks executed 0%
    #####: 2075:inline int Write(int fd, const void* buf, unsigned int count) {
    #####: 2076:  return static_cast<int>(write(fd, buf, count));
    %%%%%: 2076-block  0
call    0 never executed
        -: 2077:}
function _ZN7testing8internal5posix5CloseEi called 0 returned 0% blocks executed 0%
    #####: 2078:inline int Close(int fd) { return close(fd); }
    %%%%%: 2078-block  0
call    0 never executed
function _ZN7testing8internal5posix8StrErrorEi called 0 returned 0% blocks executed 0%
    #####: 2079:inline const char* StrError(int errnum) { return strerror(errnum); }
    %%%%%: 2079-block  0
call    0 never executed
        -: 2080:#endif
function _ZN7testing8internal5posix6GetEnvEPKc called 30 returned 100% blocks executed 100%
       30: 2081:inline const char* GetEnv(const char* name) {
        -: 2082:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE ||          \
        -: 2083:    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266 || GTEST_OS_XTENSA || \
        -: 2084:    GTEST_OS_QURT
        -: 2085:  // We are on an embedded platform, which has no environment variables.
        -: 2086:  static_cast<void>(name);  // To prevent 'unused argument' warning.
        -: 2087:  return nullptr;
        -: 2088:#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)
        -: 2089:  // Environment variables which we programmatically clear will be set to the
        -: 2090:  // empty string rather than unset (NULL).  Handle that case.
        -: 2091:  const char* const env = getenv(name);
        -: 2092:  return (env != nullptr && env[0] != '\0') ? env : nullptr;
        -: 2093:#else
       30: 2094:  return getenv(name);
       30: 2094-block  0
call    0 returned 30
        -: 2095:#endif
        -: 2096:}
        -: 2097:
        -: 2098:GTEST_DISABLE_MSC_DEPRECATED_POP_()
        -: 2099:
        -: 2100:#if GTEST_OS_WINDOWS_MOBILE
        -: 2101:// Windows CE has no C library. The abort() function is used in
        -: 2102:// several places in Google Test. This implementation provides a reasonable
        -: 2103:// imitation of standard behaviour.
        -: 2104:[[noreturn]] void Abort();
        -: 2105:#else
function _ZN7testing8internal5posix5AbortEv called 0 returned 0% blocks executed 0%
    #####: 2106:[[noreturn]] inline void Abort() { abort(); }
        -: 2107:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 2108:
        -: 2109:}  // namespace posix
        -: 2110:
        -: 2111:// MSVC "deprecates" snprintf and issues warnings wherever it is used.  In
        -: 2112:// order to avoid these warnings, we need to use _snprintf or _snprintf_s on
        -: 2113:// MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate
        -: 2114:// function in order to achieve that.  We use macro definition here because
        -: 2115:// snprintf is a variadic function.
        -: 2116:#if _MSC_VER && !GTEST_OS_WINDOWS_MOBILE
        -: 2117:// MSVC 2005 and above support variadic macros.
        -: 2118:#define GTEST_SNPRINTF_(buffer, size, format, ...) \
        -: 2119:  _snprintf_s(buffer, size, size, format, __VA_ARGS__)
        -: 2120:#elif defined(_MSC_VER)
        -: 2121:// Windows CE does not define _snprintf_s
        -: 2122:#define GTEST_SNPRINTF_ _snprintf
        -: 2123:#else
        -: 2124:#define GTEST_SNPRINTF_ snprintf
        -: 2125:#endif
        -: 2126:
        -: 2127:// The biggest signed integer type the compiler supports.
        -: 2128://
        -: 2129:// long long is guaranteed to be at least 64-bits in C++11.
        -: 2130:using BiggestInt = long long;  // NOLINT
        -: 2131:
        -: 2132:// The maximum number a BiggestInt can represent.
        -: 2133:constexpr BiggestInt kMaxBiggestInt = (std::numeric_limits<BiggestInt>::max)();
        -: 2134:
        -: 2135:// This template class serves as a compile-time function from size to
        -: 2136:// type.  It maps a size in bytes to a primitive type with that
        -: 2137:// size. e.g.
        -: 2138://
        -: 2139://   TypeWithSize<4>::UInt
        -: 2140://
        -: 2141:// is typedef-ed to be unsigned int (unsigned integer made up of 4
        -: 2142:// bytes).
        -: 2143://
        -: 2144:// Such functionality should belong to STL, but I cannot find it
        -: 2145:// there.
        -: 2146://
        -: 2147:// Google Test uses this class in the implementation of floating-point
        -: 2148:// comparison.
        -: 2149://
        -: 2150:// For now it only handles UInt (unsigned int) as that's all Google Test
        -: 2151:// needs.  Other types can be easily added in the future if need
        -: 2152:// arises.
        -: 2153:template <size_t size>
        -: 2154:class TypeWithSize {
        -: 2155: public:
        -: 2156:  // This prevents the user from using TypeWithSize<N> with incorrect
        -: 2157:  // values of N.
        -: 2158:  using UInt = void;
        -: 2159:};
        -: 2160:
        -: 2161:// The specialization for size 4.
        -: 2162:template <>
        -: 2163:class TypeWithSize<4> {
        -: 2164: public:
        -: 2165:  using Int = std::int32_t;
        -: 2166:  using UInt = std::uint32_t;
        -: 2167:};
        -: 2168:
        -: 2169:// The specialization for size 8.
        -: 2170:template <>
        -: 2171:class TypeWithSize<8> {
        -: 2172: public:
        -: 2173:  using Int = std::int64_t;
        -: 2174:  using UInt = std::uint64_t;
        -: 2175:};
        -: 2176:
        -: 2177:// Integer types of known sizes.
        -: 2178:using TimeInMillis = int64_t;  // Represents time in milliseconds.
        -: 2179:
        -: 2180:// Utilities for command line flags and environment variables.
        -: 2181:
        -: 2182:// Macro for referencing flags.
        -: 2183:#if !defined(GTEST_FLAG)
        -: 2184:#define GTEST_FLAG_NAME_(name) gtest_##name
        -: 2185:#define GTEST_FLAG(name) FLAGS_gtest_##name
        -: 2186:#endif  // !defined(GTEST_FLAG)
        -: 2187:
        -: 2188:// Pick a command line flags implementation.
        -: 2189:#if GTEST_HAS_ABSL
        -: 2190:
        -: 2191:// Macros for defining flags.
        -: 2192:#define GTEST_DEFINE_bool_(name, default_val, doc) \
        -: 2193:  ABSL_FLAG(bool, GTEST_FLAG_NAME_(name), default_val, doc)
        -: 2194:#define GTEST_DEFINE_int32_(name, default_val, doc) \
        -: 2195:  ABSL_FLAG(int32_t, GTEST_FLAG_NAME_(name), default_val, doc)
        -: 2196:#define GTEST_DEFINE_string_(name, default_val, doc) \
        -: 2197:  ABSL_FLAG(std::string, GTEST_FLAG_NAME_(name), default_val, doc)
        -: 2198:
        -: 2199:// Macros for declaring flags.
        -: 2200:#define GTEST_DECLARE_bool_(name) \
        -: 2201:  ABSL_DECLARE_FLAG(bool, GTEST_FLAG_NAME_(name))
        -: 2202:#define GTEST_DECLARE_int32_(name) \
        -: 2203:  ABSL_DECLARE_FLAG(int32_t, GTEST_FLAG_NAME_(name))
        -: 2204:#define GTEST_DECLARE_string_(name) \
        -: 2205:  ABSL_DECLARE_FLAG(std::string, GTEST_FLAG_NAME_(name))
        -: 2206:
        -: 2207:#define GTEST_FLAG_SAVER_ ::absl::FlagSaver
        -: 2208:
        -: 2209:#define GTEST_FLAG_GET(name) ::absl::GetFlag(GTEST_FLAG(name))
        -: 2210:#define GTEST_FLAG_SET(name, value) \
        -: 2211:  (void)(::absl::SetFlag(&GTEST_FLAG(name), value))
        -: 2212:#define GTEST_USE_OWN_FLAGFILE_FLAG_ 0
        -: 2213:
        -: 2214:#else  // GTEST_HAS_ABSL
        -: 2215:
        -: 2216:// Macros for defining flags.
        -: 2217:#define GTEST_DEFINE_bool_(name, default_val, doc)  \
        -: 2218:  namespace testing {                               \
        -: 2219:  GTEST_API_ bool GTEST_FLAG(name) = (default_val); \
        -: 2220:  }                                                 \
        -: 2221:  static_assert(true, "no-op to require trailing semicolon")
        -: 2222:#define GTEST_DEFINE_int32_(name, default_val, doc)         \
        -: 2223:  namespace testing {                                       \
        -: 2224:  GTEST_API_ std::int32_t GTEST_FLAG(name) = (default_val); \
        -: 2225:  }                                                         \
        -: 2226:  static_assert(true, "no-op to require trailing semicolon")
        -: 2227:#define GTEST_DEFINE_string_(name, default_val, doc)         \
        -: 2228:  namespace testing {                                        \
        -: 2229:  GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val); \
        -: 2230:  }                                                          \
        -: 2231:  static_assert(true, "no-op to require trailing semicolon")
        -: 2232:
        -: 2233:// Macros for declaring flags.
        -: 2234:#define GTEST_DECLARE_bool_(name)          \
        -: 2235:  namespace testing {                      \
        -: 2236:  GTEST_API_ extern bool GTEST_FLAG(name); \
        -: 2237:  }                                        \
        -: 2238:  static_assert(true, "no-op to require trailing semicolon")
        -: 2239:#define GTEST_DECLARE_int32_(name)                 \
        -: 2240:  namespace testing {                              \
        -: 2241:  GTEST_API_ extern std::int32_t GTEST_FLAG(name); \
        -: 2242:  }                                                \
        -: 2243:  static_assert(true, "no-op to require trailing semicolon")
        -: 2244:#define GTEST_DECLARE_string_(name)                 \
        -: 2245:  namespace testing {                               \
        -: 2246:  GTEST_API_ extern ::std::string GTEST_FLAG(name); \
        -: 2247:  }                                                 \
        -: 2248:  static_assert(true, "no-op to require trailing semicolon")
        -: 2249:
        -: 2250:#define GTEST_FLAG_SAVER_ ::testing::internal::GTestFlagSaver
        -: 2251:
        -: 2252:#define GTEST_FLAG_GET(name) ::testing::GTEST_FLAG(name)
        -: 2253:#define GTEST_FLAG_SET(name, value) (void)(::testing::GTEST_FLAG(name) = value)
        -: 2254:#define GTEST_USE_OWN_FLAGFILE_FLAG_ 1
        -: 2255:
        -: 2256:#endif  // GTEST_HAS_ABSL
        -: 2257:
        -: 2258:// Thread annotations
        -: 2259:#if !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)
        -: 2260:#define GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)
        -: 2261:#define GTEST_LOCK_EXCLUDED_(locks)
        -: 2262:#endif  // !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)
        -: 2263:
        -: 2264:// Parses 'str' for a 32-bit signed integer.  If successful, writes the result
        -: 2265:// to *value and returns true; otherwise leaves *value unchanged and returns
        -: 2266:// false.
        -: 2267:GTEST_API_ bool ParseInt32(const Message& src_text, const char* str,
        -: 2268:                           int32_t* value);
        -: 2269:
        -: 2270:// Parses a bool/int32_t/string from the environment variable
        -: 2271:// corresponding to the given Google Test flag.
        -: 2272:bool BoolFromGTestEnv(const char* flag, bool default_val);
        -: 2273:GTEST_API_ int32_t Int32FromGTestEnv(const char* flag, int32_t default_val);
        -: 2274:std::string OutputFlagAlsoCheckEnvVar();
        -: 2275:const char* StringFromGTestEnv(const char* flag, const char* default_val);
        -: 2276:
        -: 2277:}  // namespace internal
        -: 2278:}  // namespace testing
        -: 2279:
        -: 2280:#if !defined(GTEST_INTERNAL_DEPRECATED)
        -: 2281:
        -: 2282:// Internal Macro to mark an API deprecated, for googletest usage only
        -: 2283:// Usage: class GTEST_INTERNAL_DEPRECATED(message) MyClass or
        -: 2284:// GTEST_INTERNAL_DEPRECATED(message) <return_type> myFunction(); Every usage of
        -: 2285:// a deprecated entity will trigger a warning when compiled with
        -: 2286:// `-Wdeprecated-declarations` option (clang, gcc, any __GNUC__ compiler).
        -: 2287:// For msvc /W3 option will need to be used
        -: 2288:// Note that for 'other' compilers this macro evaluates to nothing to prevent
        -: 2289:// compilations errors.
        -: 2290:#if defined(_MSC_VER)
        -: 2291:#define GTEST_INTERNAL_DEPRECATED(message) __declspec(deprecated(message))
        -: 2292:#elif defined(__GNUC__)
        -: 2293:#define GTEST_INTERNAL_DEPRECATED(message) __attribute__((deprecated(message)))
        -: 2294:#else
        -: 2295:#define GTEST_INTERNAL_DEPRECATED(message)
        -: 2296:#endif
        -: 2297:
        -: 2298:#endif  // !defined(GTEST_INTERNAL_DEPRECATED)
        -: 2299:
        -: 2300:#if GTEST_HAS_ABSL
        -: 2301:// Always use absl::any for UniversalPrinter<> specializations if googletest
        -: 2302:// is built with absl support.
        -: 2303:#define GTEST_INTERNAL_HAS_ANY 1
        -: 2304:#include "absl/types/any.h"
        -: 2305:namespace testing {
        -: 2306:namespace internal {
        -: 2307:using Any = ::absl::any;
        -: 2308:}  // namespace internal
        -: 2309:}  // namespace testing
        -: 2310:#else
        -: 2311:#ifdef __has_include
        -: 2312:#if __has_include(<any>) && __cplusplus >= 201703L
        -: 2313:// Otherwise for C++17 and higher use std::any for UniversalPrinter<>
        -: 2314:// specializations.
        -: 2315:#define GTEST_INTERNAL_HAS_ANY 1
        -: 2316:#include <any>
        -: 2317:namespace testing {
        -: 2318:namespace internal {
        -: 2319:using Any = ::std::any;
        -: 2320:}  // namespace internal
        -: 2321:}  // namespace testing
        -: 2322:// The case where absl is configured NOT to alias std::any is not
        -: 2323:// supported.
        -: 2324:#endif  // __has_include(<any>) && __cplusplus >= 201703L
        -: 2325:#endif  // __has_include
        -: 2326:#endif  // GTEST_HAS_ABSL
        -: 2327:
        -: 2328:#if GTEST_HAS_ABSL
        -: 2329:// Always use absl::optional for UniversalPrinter<> specializations if
        -: 2330:// googletest is built with absl support.
        -: 2331:#define GTEST_INTERNAL_HAS_OPTIONAL 1
        -: 2332:#include "absl/types/optional.h"
        -: 2333:namespace testing {
        -: 2334:namespace internal {
        -: 2335:template <typename T>
        -: 2336:using Optional = ::absl::optional<T>;
        -: 2337:inline ::absl::nullopt_t Nullopt() { return ::absl::nullopt; }
        -: 2338:}  // namespace internal
        -: 2339:}  // namespace testing
        -: 2340:#else
        -: 2341:#ifdef __has_include
        -: 2342:#if __has_include(<optional>) && __cplusplus >= 201703L
        -: 2343:// Otherwise for C++17 and higher use std::optional for UniversalPrinter<>
        -: 2344:// specializations.
        -: 2345:#define GTEST_INTERNAL_HAS_OPTIONAL 1
        -: 2346:#include <optional>
        -: 2347:namespace testing {
        -: 2348:namespace internal {
        -: 2349:template <typename T>
        -: 2350:using Optional = ::std::optional<T>;
        -: 2351:inline ::std::nullopt_t Nullopt() { return ::std::nullopt; }
        -: 2352:}  // namespace internal
        -: 2353:}  // namespace testing
        -: 2354:// The case where absl is configured NOT to alias std::optional is not
        -: 2355:// supported.
        -: 2356:#endif  // __has_include(<optional>) && __cplusplus >= 201703L
        -: 2357:#endif  // __has_include
        -: 2358:#endif  // GTEST_HAS_ABSL
        -: 2359:
        -: 2360:#if GTEST_HAS_ABSL
        -: 2361:// Always use absl::string_view for Matcher<> specializations if googletest
        -: 2362:// is built with absl support.
        -: 2363:#define GTEST_INTERNAL_HAS_STRING_VIEW 1
        -: 2364:#include "absl/strings/string_view.h"
        -: 2365:namespace testing {
        -: 2366:namespace internal {
        -: 2367:using StringView = ::absl::string_view;
        -: 2368:}  // namespace internal
        -: 2369:}  // namespace testing
        -: 2370:#else
        -: 2371:#ifdef __has_include
        -: 2372:#if __has_include(<string_view>) && __cplusplus >= 201703L
        -: 2373:// Otherwise for C++17 and higher use std::string_view for Matcher<>
        -: 2374:// specializations.
        -: 2375:#define GTEST_INTERNAL_HAS_STRING_VIEW 1
        -: 2376:#include <string_view>
        -: 2377:namespace testing {
        -: 2378:namespace internal {
        -: 2379:using StringView = ::std::string_view;
        -: 2380:}  // namespace internal
        -: 2381:}  // namespace testing
        -: 2382:// The case where absl is configured NOT to alias std::string_view is not
        -: 2383:// supported.
        -: 2384:#endif  // __has_include(<string_view>) && __cplusplus >= 201703L
        -: 2385:#endif  // __has_include
        -: 2386:#endif  // GTEST_HAS_ABSL
        -: 2387:
        -: 2388:#if GTEST_HAS_ABSL
        -: 2389:// Always use absl::variant for UniversalPrinter<> specializations if googletest
        -: 2390:// is built with absl support.
        -: 2391:#define GTEST_INTERNAL_HAS_VARIANT 1
        -: 2392:#include "absl/types/variant.h"
        -: 2393:namespace testing {
        -: 2394:namespace internal {
        -: 2395:template <typename... T>
        -: 2396:using Variant = ::absl::variant<T...>;
        -: 2397:}  // namespace internal
        -: 2398:}  // namespace testing
        -: 2399:#else
        -: 2400:#ifdef __has_include
        -: 2401:#if __has_include(<variant>) && __cplusplus >= 201703L
        -: 2402:// Otherwise for C++17 and higher use std::variant for UniversalPrinter<>
        -: 2403:// specializations.
        -: 2404:#define GTEST_INTERNAL_HAS_VARIANT 1
        -: 2405:#include <variant>
        -: 2406:namespace testing {
        -: 2407:namespace internal {
        -: 2408:template <typename... T>
        -: 2409:using Variant = ::std::variant<T...>;
        -: 2410:}  // namespace internal
        -: 2411:}  // namespace testing
        -: 2412:// The case where absl is configured NOT to alias std::variant is not supported.
        -: 2413:#endif  // __has_include(<variant>) && __cplusplus >= 201703L
        -: 2414:#endif  // __has_include
        -: 2415:#endif  // GTEST_HAS_ABSL
        -: 2416:
        -: 2417:#endif  // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
