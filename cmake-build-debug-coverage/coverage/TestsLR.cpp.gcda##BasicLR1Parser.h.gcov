        -:    0:Source:/home/ownstreamer/proga/C++/Parsers/src/BasicLR1Parser.h
        -:    0:Graph:/home/ownstreamer/proga/C++/Parsers/cmake-build-debug-coverage/GoogleTests/CMakeFiles/Google_Tests_run.dir/src/TestsLR.cpp.gcno
        -:    0:Data:/home/ownstreamer/proga/C++/Parsers/cmake-build-debug-coverage/GoogleTests/CMakeFiles/Google_Tests_run.dir/src/TestsLR.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <boost/dynamic_bitset.hpp>
        -:    4:#include <fstream>
        -:    5:#include <stack>
        -:    6:
        -:    7:#include "GrammarBase.h"
        -:    8:
        -:    9:template <typename CharT, size_t K>
        -:   10:class BasicLRParser {
        -:   11: public:
        -:   12:  BasicLRParser() {
        -:   13:    std::wcerr << "LR(" << K << ") is not implemented\n";
        -:   14:    exit(NotImplemented);
        -:   15:  }
        -:   16:
        -:   17: private:
        -:   18:  enum LRExitStatus { NotImplemented = 12 };
        -:   19:};
        -:   20:
        -:   21:template <typename CharT>
        -:   22:class BasicLRParser<CharT, 1> {
        -:   23: public:
        -:   24:  BasicLRParser() = default;
        -:   25:  BasicLRParser(const std::string& filename);
        -:   26:  BasicLRParser(std::basic_istream<CharT>& input);
        -:   27:
        -:   28:  void SetGrammar(const std::string& filename);
        -:   29:  void SetGrammar(std::basic_istream<CharT>& input);
        -:   30:  void PrintGrammar(std::basic_ostream<CharT>& out) const;
        -:   31:  bool Parse(const std::basic_string<CharT>& word) const;
        -:   32:
        -:   33: private:
        -:   34:  using IndexT = GrammarBase<CharT>::IndexT;
        -:   35:  template <typename T>
        -:   36:  using Vector = std::vector<T>;
        -:   37:  template <class Key, class Value, class Hash = std::hash<Key>>
        -:   38:  using UMap = std::unordered_map<Key, Value, Hash>;
        -:   39:  template <class Key, class Hash = std::hash<Key>>
        -:   40:  using USet = std::unordered_set<Key, Hash>;
        -:   41:  template <typename T>
        -:   42:  using RefW = std::reference_wrapper<T>;
        -:   43:  using Bitset = boost::dynamic_bitset<>;
        -:   44:
        -:   45:  enum ActionT { Shift = 0, Reduce, Accept };
        -:   46:  struct Action;
        -:   47:  struct Situation;
        -:   48:  struct Bucket;
        -:   49:  class Grammar;
        -:   50:  class ParseStack;
        -:   51:
        -:   52:  using TableT = Vector<UMap<IndexT, Action>>;
        -:   53:  using ActionHasher = Action::ActionHasher;
        -:   54:  using SitsHasher = Situation::SituationHasher;
        -:   55:  using BucketHasher = Bucket::BucketHasher;
        -:   56:  using USetSits = USet<Situation, SitsHasher>;
        -:   57:  using USetBuckets = USet<Bucket, BucketHasher>;
        -:   58:
        -:   59:  Grammar grammar_;
        -:   60:  TableT table_;
        -:   61:
        -:   62:  size_t Goto(USetBuckets& buckets, Vector<RefW<const Bucket>>& buckets_vec,
        -:   63:              size_t bucket_id, std::stack<Situation>& unhandled_sits);
        -:   64:  void CreateTable();
        -:   65:  Bitset First(const Situation& sit) const;
        -:   66:  void Closure(Bucket& bucket, std::stack<Situation>& unhandled_sits);
        -:   67:  void Clear();
        -:   68:};
        -:   69:
        -:   70:template <typename CharT>
        -:   71:struct BasicLRParser<CharT, 1>::Action {
        -:   72:  ActionT type;
        -:   73:  // if type == Shift, id contains id of bucket to shift to
        -:   74:  // if type == Reduce, length and left are length of right part of rule
        -:   75:  //            and index of left nonterminal of rule to make reduce by
        -:   76:  // if type == Accept, id = 0
        -:   77:  union {
        -:   78:    size_t id;
        -:   79:    struct {
        -:   80:      size_t length;
        -:   81:      IndexT left;
        -:   82:    };
        -:   83:  };
function _ZN13BasicLRParserIwLm1EE6ActionC2Ev called 313 returned 100% blocks executed 100%
      313:   84:  Action() : type(Accept), id(0) {}
function _ZN13BasicLRParserIwLm1EE6ActionC2Em called 196 returned 100% blocks executed 100%
      196:   85:  Action(size_t bucket_id) : type(Shift), id(bucket_id) {}
function _ZN13BasicLRParserIwLm1EE6ActionC2Eml called 190 returned 100% blocks executed 100%
      190:   86:  Action(size_t length, IndexT left)
      190:   87:      : type(Reduce), length(length), left(left) {}
        -:   88:  struct ActionHasher {
        -:   89:    static constexpr size_t kMult1 = 0x9e3779b9;
        -:   90:    static constexpr size_t kOff1 = 4;
function _ZNK13BasicLRParserIwLm1EE6Action12ActionHasherclERKS1_ called 190 returned 100% blocks executed 75%
      190:   91:    constexpr size_t operator()(const Action& act) const {
      190:   92:      if (act.type == Reduce) {
      190:   92-block  0
branch  0 taken 190 (fallthrough)
branch  1 taken 0
      190:   93:        return size_t(act.type) * kMult1 + act.length << kOff1 + act.left;
      190:   93-block  0
        -:   94:      }
    #####:   95:      return size_t(act.type) * kMult1 + act.id << kOff1;
    %%%%%:   95-block  0
        -:   96:    }
        -:   97:  };
function _ZNK13BasicLRParserIwLm1EE6ActioneqERKS1_ called 82 returned 100% blocks executed 73%
       82:   98:  bool operator==(const Action& act) const {
       82:   99:    if (type != act.type) {
       82:   99-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 82
    #####:  100:      return false;
    %%%%%:  100-block  0
        -:  101:    }
      82*:  102:    return (type == Reduce) ? length == act.length && left == act.left
       82:  102-block  0
branch  0 taken 82 (fallthrough)
branch  1 taken 0
       82:  102-block  1
branch  2 taken 82 (fallthrough)
branch  3 taken 0
       82:  102-block  2
branch  4 taken 82 (fallthrough)
branch  5 taken 0
       82:  102-block  3
    %%%%%:  102-block  4
       82:  102-block  5
      82*:  103:                            : id == act.id;
    %%%%%:  103-block  0
       82:  103-block  1
        -:  104:  }
        -:  105:};
        -:  106:
        -:  107:template <typename CharT>
        -:  108:struct BasicLRParser<CharT, 1>::Situation {
        -:  109: private:
        -:  110:  RefW<const Vector<IndexT>> right_;
        -:  111:
        -:  112: public:
        -:  113:  IndexT left;
        -:  114:  IndexT context;
        -:  115:  size_t pos;
        -:  116:
function _ZN13BasicLRParserIwLm1EE9SituationC2ESt17reference_wrapperIKSt6vectorIlSaIlEEEllm called 477 returned 100% blocks executed 100%
      477:  117:  Situation(RefW<const std::vector<IndexT>> right, IndexT left, IndexT context,
        -:  118:            size_t pos)
      477:  119:      : right_(right), left(left), context(context), pos(pos) {}
function _ZNK13BasicLRParserIwLm1EE9Situation9RoolEndedEv called 707 returned 100% blocks executed 100%
      707:  120:  bool RoolEnded() const { return pos == RightSize(); }
      707:  120-block  0
call    0 returned 707
function _ZNK13BasicLRParserIwLm1EE9Situation10CurrSymbolEv called 1153 returned 100% blocks executed 100%
     1153:  121:  IndexT CurrSymbol() const { return right_.get()[pos]; }
     1153:  121-block  0
call    0 returned 1153
call    1 returned 1153
function _ZNK13BasicLRParserIwLm1EE9Situation10IsAcceptedEv called 199 returned 100% blocks executed 100%
      199:  122:  bool IsAccepted() const {
      199:  123:    return left == Grammar::kAuxiliaryStartSymbolInd && pos == 1;
      199:  123-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 190
        9:  123-block  1
branch  2 taken 9 (fallthrough)
branch  3 taken 0
        9:  123-block  2
      190:  123-block  3
      199:  123-block  4
        -:  124:  }
function _ZNK13BasicLRParserIwLm1EE9Situation9RightSizeEv called 1040 returned 100% blocks executed 100%
     1040:  125:  size_t RightSize() const {
     1040:  126:    return right_.get().size() -
     1040:  126-block  0
call    0 returned 1040
call    1 returned 1040
     1040:  127:           size_t(right_.get().back() == Grammar::kEpsilonInd);
call    0 returned 1040
call    1 returned 1040
        -:  128:  }
function _ZNK13BasicLRParserIwLm1EE9Situation11RightSymbolEm called 212 returned 100% blocks executed 100%
      212:  129:  IndexT RightSymbol(size_t ind) const { return right_.get()[ind]; }
      212:  129-block  0
call    0 returned 212
call    1 returned 212
        -:  130:  struct SituationHasher {
        -:  131:    static constexpr size_t kMult1 = 0x45d9f3b;
        -:  132:    static constexpr size_t kOff1 = 6;
        -:  133:    static constexpr size_t kOff2 = 2;
        -:  134:    struct VectorHasher {
function _ZNK13BasicLRParserIwLm1EE9Situation15SituationHasher12VectorHasherclERKSt6vectorIlSaIlEE called 1727 returned 100% blocks executed 100%
     1727:  135:      constexpr size_t operator()(const std::vector<IndexT>& vec) const {
     1727:  136:        size_t seed = vec.size();
     1727:  136-block  0
call    0 returned 1727
     7545:  137:        for (IndexT elem : vec) {
call    0 returned 1727
call    1 returned 1727
     5818:  137-block  0
call    2 returned 5818
     7545:  137-block  1
call    3 returned 7545
branch  4 taken 5818
branch  5 taken 1727 (fallthrough)
     5818:  138:          seed ^= elem + kMult1 + (seed << kOff1) + (seed >> kOff2);
call    0 returned 5818
        -:  139:        }
     1727:  140:        return seed;
     1727:  140-block  0
        -:  141:      }
        -:  142:    };
function _ZNK13BasicLRParserIwLm1EE9Situation15SituationHasherclERKS1_ called 1727 returned 100% blocks executed 100%
     1727:  143:    constexpr size_t operator()(const Situation& sit) const {
     1727:  144:      return VectorHasher()(sit.right_.get()) + (sit.left << kOff1) +
     1727:  144-block  0
call    0 returned 1727
call    1 returned 1727
     1727:  145:             (sit.pos >> kOff2);
        -:  146:    }
        -:  147:  };
function _ZNK13BasicLRParserIwLm1EE9SituationeqERKS1_ called 1195 returned 100% blocks executed 100%
     1195:  148:  bool operator==(const Situation& sit) const {
     2390:  149:    return &right_.get() == &sit.right_.get() && left == sit.left &&
     1195:  149-block  0
call    0 returned 1195
call    1 returned 1195
     1195:  149-block  1
branch  2 taken 1195 (fallthrough)
branch  3 taken 0
     2390:  150:           context == sit.context && pos == sit.pos;
branch  0 taken 1195 (fallthrough)
branch  1 taken 0
     1195:  150-block  0
branch  2 taken 853 (fallthrough)
branch  3 taken 342
      853:  150-block  1
branch  4 taken 785 (fallthrough)
branch  5 taken 68
      785:  150-block  2
      410:  150-block  3
     1195:  150-block  4
        -:  151:  }
        -:  152:};
        -:  153:// todo: add USetSits
        -:  154:template <typename CharT>
        -:  155:struct BasicLRParser<CharT, 1>::Bucket {
        -:  156:  UMap<IndexT, USet<Situation, SitsHasher>> shift_sits;  // index is curr symbol
        -:  157:  UMap<IndexT, Action> reduce_sits;                      // index is context
        -:  158:  size_t id;                     /// mustn't be used in hashing
        -:  159:  bool contains_accept = false;  // isn't used in hashing
        -:  160:
        -:  161:  struct BucketHasher {
        -:  162:    static constexpr size_t kOff1 = 5;
        -:  163:    static constexpr size_t kOff2 = 3;
        -:  164:    struct USetHasher {
function _ZNK13BasicLRParserIwLm1EE6Bucket12BucketHasher10USetHasherclERKSt13unordered_setINS0_9SituationENS5_15SituationHasherESt8equal_toIS5_ESaIS5_EE called 470 returned 100% blocks executed 92%
      470:  165:      constexpr size_t operator()(const USetSits& u_set) const {
      470:  166:        size_t seed = u_set.size();
      470:  166-block  0
call    0 returned 470
      978:  167:        for (const auto& elem : u_set) {
call    0 returned 470
call    1 returned 470
      508:  167-block  0
call    2 returned 508
      978:  167-block  1
call    3 returned 978
branch  4 taken 508
branch  5 taken 470 (fallthrough)
      508:  168:          seed ^= SitsHasher()(elem);
call    0 returned 508
branch  1 taken 508 (fallthrough)
branch  2 taken 0 (throw)
      508:  168-block  0
call    3 returned 508
    $$$$$:  168-block  1
        -:  169:        }
      470:  170:        return seed;
      470:  170-block  0
      470:  170-block  1
        -:  171:      }
        -:  172:    };
function _ZNK13BasicLRParserIwLm1EE6Bucket12BucketHasherclERKS1_ called 205 returned 100% blocks executed 95%
      205:  173:    constexpr size_t operator()(const Bucket& bucket) const {
      205:  174:      size_t seed = bucket.shift_sits.size() + bucket.reduce_sits.size();
      205:  174-block  0
call    0 returned 205
call    1 returned 205
      675:  175:      for (const auto& elem : bucket.shift_sits) {
call    0 returned 205
call    1 returned 205
      470:  175-block  0
call    2 returned 470
      675:  175-block  1
call    3 returned 675
branch  4 taken 470
branch  5 taken 205 (fallthrough)
      470:  176:        seed ^= elem.first + (seed << kOff1) + USetHasher()(elem.second);
call    0 returned 470
branch  1 taken 470 (fallthrough)
branch  2 taken 0 (throw)
      470:  176-block  0
call    3 returned 470
    $$$$$:  176-block  1
        -:  177:      }
      395:  178:      for (const auto& elem : bucket.reduce_sits) {
      205:  178-block  0
call    0 returned 205
call    1 returned 205
      190:  178-block  1
call    2 returned 190
      395:  178-block  2
call    3 returned 395
branch  4 taken 190
branch  5 taken 205 (fallthrough)
      190:  179:        seed ^= elem.first + (seed << kOff2) + ActionHasher()(elem.second);
call    0 returned 190
call    1 returned 190
        -:  180:      }
      205:  181:      return seed;
      205:  181-block  0
      205:  181-block  1
        -:  182:    }
        -:  183:  };
function _ZNK13BasicLRParserIwLm1EE6BucketeqERKS1_ called 286 returned 100% blocks executed 100%
      286:  184:  bool operator==(const Bucket& bucket) const {
      286:  185:    return shift_sits == bucket.shift_sits && reduce_sits == bucket.reduce_sits;
      286:  185-block  0
call    0 returned 286
branch  1 taken 83 (fallthrough)
branch  2 taken 203
       83:  185-block  1
call    3 returned 83
branch  4 taken 83 (fallthrough)
branch  5 taken 0
       83:  185-block  2
      203:  185-block  3
      286:  185-block  4
        -:  186:  }
        -:  187:};
        -:  188:
        -:  189:template <typename CharT>
        -:  190:class BasicLRParser<CharT, 1>::Grammar : public GrammarBase<CharT> {
        -:  191: public:
        -:  192:  using RulesRightT = GrammarBase<CharT>::RulesRightT;
        -:  193:  using GrammarBase<CharT>::kEpsilonInd;
        -:  194:  using GrammarBase<CharT>::kStartSymbolInd;
        -:  195:  using GrammarBase<CharT>::kAuxiliaryStartSymbolInd;
        -:  196:
function _ZNK13BasicLRParserIwLm1EE7Grammar5FirstEl called 274 returned 100% blocks executed 100%
      274:  197:  const Bitset& First(IndexT symbol) const {
      274:  198:    return first_.find(symbol)->second;
      274:  198-block  0
call    0 returned 274
call    1 returned 274
        -:  199:  }
function _ZNK13BasicLRParserIwLm1EE7Grammar13FromBitsetIndEm called 468 returned 100% blocks executed 100%
      468:  200:  IndexT FromBitsetInd(size_t ind) const {
      468:  201:    return IndexT(ind) - terminals_count_;
      468:  201-block  0
        -:  202:  }
function _ZNK13BasicLRParserIwLm1EE7Grammar14ProduceEpsilonEl called 166 returned 100% blocks executed 100%
      166:  203:  bool ProduceEpsilon(IndexT ind) const {
      166:  204:    return first_.find(ind)->second.test(ToBitsetInd(this->kEpsilonInd));
      166:  204-block  0
call    0 returned 166
call    1 returned 166
call    2 returned 166
call    3 returned 166
branch  4 taken 166 (fallthrough)
branch  5 taken 0 (throw)
      166:  204-block  1
      166:  204-block  2
      166:  204-block  3
        -:  205:  }
function _ZNK13BasicLRParserIwLm1EE7Grammar8MinIndexEv called 9 returned 100% blocks executed 100%
        9:  206:  IndexT MinIndex() const { return -terminals_count_; }
        9:  206-block  0
function _ZNK13BasicLRParserIwLm1EE7Grammar8MaxIndexEv called 108 returned 100% blocks executed 100%
      108:  207:  IndexT MaxIndex() const { return nonterminals_count_ + 1; }
      108:  207-block  0
function _ZNK13BasicLRParserIwLm1EE7Grammar14StartSituationEv called 9 returned 100% blocks executed 92%
        9:  208:  Situation StartSituation() const {
       9*:  209:    assert(("Grammar is not set", !this->Empty()));
        9:  209-block  0
call    0 returned 9
branch  1 taken 0 (fallthrough)
branch  2 taken 9
    %%%%%:  209-block  1
call    3 never executed
        9:  210:    auto iter = this->rules_.find(this->kAuxiliaryStartSymbolInd);
        9:  210-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  211:    return {iter->second[0], iter->first, this->kEpsilonInd, 0};
        9:  211-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
call    3 returned 9
call    4 returned 9
        9:  211-block  1
        -:  212:  }
function _ZNK13BasicLRParserIwLm1EE7Grammar9RightPartEl called 143 returned 100% blocks executed 100%
      143:  213:  const RulesRightT& RightPart(IndexT ind) const {
      143:  214:    return rules_.find(ind)->second;
      143:  214-block  0
call    0 returned 143
call    1 returned 143
        -:  215:  }
function _ZNK13BasicLRParserIwLm1EE7Grammar10BitsetSizeEv called 137 returned 100% blocks executed 100%
      137:  216:  size_t BitsetSize() const { return bitset_size_; }
      137:  216-block  0
        -:  217:  static bool IsEpsilon(IndexT ind) { return ind == kEpsilonInd; }
        -:  218:
        -:  219: protected:
        -:  220:  using GrammarBase<CharT>::map_ind_str_;
        -:  221:  using GrammarBase<CharT>::map_str_ind_;
        -:  222:  using GrammarBase<CharT>::terminals_count_;
        -:  223:  using GrammarBase<CharT>::nonterminals_count_;
        -:  224:  using GrammarBase<CharT>::rules_;
        -:  225:
function _ZN13BasicLRParserIwLm1EE7Grammar9AfterReadEv called 9 returned 100% blocks executed 76%
        9:  226:  void AfterRead() override {
        -:  227:    /// create first_
        -:  228:    // terminals
        9:  229:    bitset_size_ = terminals_count_ + nonterminals_count_ + 2;
       44:  230:    for (IndexT i = MinIndex(); i <= kEpsilonInd; ++i) {
        9:  230-block  0
call    0 returned 9
call    1 returned 35
       44:  230-block  1
branch  2 taken 35
branch  3 taken 9 (fallthrough)
    $$$$$:  230-block  2
call    4 never executed
       35:  231:      Bitset bitset(bitset_size_);
       35:  231-block  0
call    0 returned 35
call    1 returned 35
branch  2 taken 35 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  231-block  1
       35:  232:      bitset.set(ToBitsetInd(i));
call    0 returned 35
call    1 returned 35
branch  2 taken 35 (fallthrough)
branch  3 taken 0 (throw)
       35:  233:      first_[i] = std::move(bitset);
       35:  233-block  0
call    0 returned 35
call    1 returned 35
branch  2 taken 35 (fallthrough)
branch  3 taken 0 (throw)
       35:  233-block  1
call    4 returned 35
        -:  234:    }
        -:  235:    // nonterminals
       28:  236:    for (IndexT i = kStartSymbolInd; i <= MaxIndex(); ++i) {
        9:  236-block  0
       28:  236-block  1
call    0 returned 28
branch  1 taken 19
branch  2 taken 9 (fallthrough)
       19:  237:      first_[i] = Bitset(bitset_size_);
       19:  237-block  0
call    0 returned 19
call    1 returned 19
branch  2 taken 19 (fallthrough)
branch  3 taken 0 (throw)
       19:  237-block  1
call    4 returned 19
branch  5 taken 19 (fallthrough)
branch  6 taken 0 (throw)
       19:  237-block  2
call    7 returned 19
call    8 returned 19
call    9 returned 19
    $$$$$:  237-block  3
call   10 never executed
    $$$$$:  237-block  4
    $$$$$:  237-block  5
call   11 never executed
    $$$$$:  237-block  6
        -:  238:    }
        9:  239:    bool change = true;
       33:  240:    while (change) {
        9:  240-block  0
       33:  240-block  1
branch  0 taken 24
branch  1 taken 9 (fallthrough)
       24:  241:      change = false;
       80:  242:      for (IndexT i = kStartSymbolInd; i <= MaxIndex(); ++i) {
       24:  242-block  0
       80:  242-block  1
call    0 returned 80
branch  1 taken 56
branch  2 taken 24 (fallthrough)
    $$$$$:  242-block  2
call    3 never executed
       56:  243:        Bitset prev_bitset = first_[i];
       56:  243-block  0
call    0 returned 56
branch  1 taken 56 (fallthrough)
branch  2 taken 0 (throw)
       56:  243-block  1
call    3 returned 56
branch  4 taken 56 (fallthrough)
branch  5 taken 0 (throw)
      179:  244:        for (const auto& right : rules_[i]) {
       56:  244-block  0
call    0 returned 56
branch  1 taken 56 (fallthrough)
branch  2 taken 0 (throw)
       56:  244-block  1
call    3 returned 56
call    4 returned 56
      123:  244-block  2
call    5 returned 123
      123:  244-block  3
call    6 returned 123
      179:  244-block  4
call    7 returned 179
branch  8 taken 123
branch  9 taken 56 (fallthrough)
      123:  245:          size_t curr = 0;
        -:  246:          do {
      131:  247:            first_[i] |= First(right[curr]);
      131:  247-block  0
call    0 returned 131
call    1 returned 131
branch  2 taken 131 (fallthrough)
branch  3 taken 0 (throw)
      131:  247-block  1
call    4 returned 131
branch  5 taken 131 (fallthrough)
branch  6 taken 0 (throw)
      131:  247-block  2
call    7 returned 131
      131:  248:          } while (curr < right.size() - 1 && ProduceEpsilon(right[curr++]));
call    0 returned 131
branch  1 taken 60 (fallthrough)
branch  2 taken 71
       60:  248-block  0
call    3 returned 60
call    4 returned 60
branch  5 taken 60 (fallthrough)
branch  6 taken 0 (throw)
       60:  248-block  1
branch  7 taken 8 (fallthrough)
branch  8 taken 52
        8:  248-block  2
      123:  248-block  3
      131:  248-block  4
branch  9 taken 8
branch 10 taken 123 (fallthrough)
        -:  249:        }
       56:  250:        change |= first_[i] != prev_bitset;
       56:  250-block  0
call    0 returned 56
branch  1 taken 56 (fallthrough)
branch  2 taken 0 (throw)
       56:  250-block  1
call    3 returned 56
branch  4 taken 56 (fallthrough)
branch  5 taken 0 (throw)
       56:  250-block  2
call    6 returned 56
        -:  251:      }
        -:  252:    }
        9:  253:  }
        9:  253-block  0
        -:  254:
function _ZN13BasicLRParserIwLm1EE7Grammar10AfterClearEv called 0 returned 0% blocks executed 0%
    #####:  255:  void AfterClear() override {
    #####:  256:    first_.clear();
    %%%%%:  256-block  0
call    0 never executed
    #####:  257:    bitset_size_ = 0;
    #####:  258:  }
        -:  259:
        -:  260: private:
        -:  261:  UMap<IndexT, Bitset> first_;
        -:  262:  size_t bitset_size_;
function _ZNK13BasicLRParserIwLm1EE7Grammar11ToBitsetIndEl called 201 returned 100% blocks executed 100%
      201:  263:  size_t ToBitsetInd(IndexT ind) const { return ind + terminals_count_; }
      201:  263-block  0
        -:  264:};
        -:  265:
        -:  266:template <typename CharT>
        -:  267:class BasicLRParser<CharT, 1>::ParseStack {
        -:  268: private:
        -:  269:  size_t size_ = 0;
        -:  270:  size_t capacity_;
        -:  271:  Vector<IndexT> vec_;
        -:  272:
        -:  273: public:
function _ZN13BasicLRParserIwLm1EE10ParseStackC2Em called 131 returned 100% blocks executed 62%
      131:  274:  ParseStack(size_t capacity) : capacity_(capacity + 1), vec_(capacity_, 0) {}
      131:  274-block  0
call    0 returned 131
call    1 returned 131
branch  2 taken 131 (fallthrough)
branch  3 taken 0 (throw)
      131:  274-block  1
call    4 returned 131
    $$$$$:  274-block  2
    $$$$$:  274-block  3
call    5 never executed
function _ZN13BasicLRParserIwLm1EE10ParseStack4PushEl called 3999330 returned 100% blocks executed 100%
  3999330:  275:  void Push(IndexT ind) {
  3999330:  276:    if (size_ == capacity_) {
  3999330:  276-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 3999287
       43:  277:      capacity_ *= 2;
       43:  278:      vec_.resize(capacity_);
       43:  278-block  0
call    0 returned 43
        -:  279:    }
  3999330:  280:    vec_[size_++] = ind;
  3999330:  280-block  0
call    0 returned 3999330
  3999330:  281:  }
function _ZN13BasicLRParserIwLm1EE10ParseStack3PopEm called 1999614 returned 100% blocks executed 100%
  1999614:  282:  void Pop(size_t count) { size_ -= count; }
function _ZNK13BasicLRParserIwLm1EE10ParseStack3TopEv called 11997860 returned 100% blocks executed 100%
 11997860:  283:  IndexT Top() const { return vec_[size_ - 1]; }
 11997860:  283-block  0
call    0 returned 11997860
        -:  284:};
        -:  285:
        -:  286:template <typename CharT>
function _ZN13BasicLRParserIwLm1EEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 100% blocks executed 62%
        9:  287:BasicLRParser<CharT, 1>::BasicLRParser(const std::string& filename) {
        9:  287-block  0
call    0 returned 9
call    1 returned 9
        9:  288:  SetGrammar(filename);
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  289:}
        9:  289-block  0
    $$$$$:  289-block  1
call    0 never executed
    $$$$$:  289-block  2
call    1 never executed
        -:  290:
        -:  291:template <typename CharT>
        -:  292:BasicLRParser<CharT, 1>::BasicLRParser(std::basic_istream<CharT>& input) {
        -:  293:  SetGrammar(input);
        -:  294:}
        -:  295:
        -:  296:template <typename CharT>
function _ZN13BasicLRParserIwLm1EE10SetGrammarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 100% blocks executed 71%
        9:  297:void BasicLRParser<CharT, 1>::SetGrammar(const std::string& filename) {
        9:  298:  std::wifstream file(filename);
        9:  298-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  299:  SetGrammar(file);
        9:  299-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  300:}
        9:  300-block  0
call    0 returned 9
    $$$$$:  300-block  1
call    1 never executed
        -:  301:
        -:  302:template <typename CharT>
function _ZN13BasicLRParserIwLm1EE10SetGrammarERSt13basic_istreamIwSt11char_traitsIwEE called 9 returned 100% blocks executed 100%
        9:  303:void BasicLRParser<CharT, 1>::SetGrammar(std::basic_istream<CharT>& input) {
        9:  304:  Clear();
        9:  304-block  0
call    0 returned 9
        9:  305:  grammar_.Read(input);
call    0 returned 9
        9:  306:  CreateTable();
call    0 returned 9
        9:  307:}
        -:  308:
        -:  309:template <typename CharT>
        -:  310:void BasicLRParser<CharT, 1>::PrintGrammar(
        -:  311:    std::basic_ostream<CharT>& out) const {
        -:  312:  grammar_.Print(out);
        -:  313:}
        -:  314:
        -:  315:template <typename CharT>
function _ZNK13BasicLRParserIwLm1EE5ParseERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 131 returned 100% blocks executed 91%
      131:  316:bool BasicLRParser<CharT, 1>::Parse(
        -:  317:    const std::basic_string<CharT>& word) const {
      131:  318:  ParseStack stack(word.size());
      131:  318-block  0
call    0 returned 131
call    1 returned 131
branch  2 taken 131 (fallthrough)
branch  3 taken 0 (throw)
      131:  319:  stack.Push(0);
      131:  319-block  0
call    0 returned 131
branch  1 taken 131 (fallthrough)
branch  2 taken 0 (throw)
      131:  320:  size_t curr_pos = 0;
      131:  320-block  0
        -:  321:  IndexT left;  // index of left nonterminal in rule for reduce
        -:  322:  IndexT curr_ind;
  3999199:  323:  while (true) {
  3999199:  323-block  0
  3999330:  324:    if (curr_pos < word.size()) {
  3999330:  324-block  0
call    0 returned 3999330
branch  1 taken 3997356 (fallthrough)
branch  2 taken 1974
  3997356:  325:      curr_ind = grammar_.ToInd(word[curr_pos]);
  3997356:  325-block  0
call    0 returned 3997356
call    1 returned 3997356
branch  2 taken 3997356 (fallthrough)
branch  3 taken 0 (throw)
  3997356:  326:      if (grammar_.IncorrectInput(curr_ind)) {
  3997356:  326-block  0
call    0 returned 3997356
branch  1 taken 14 (fallthrough)
branch  2 taken 3997342
       14:  327:        return false;
       14:  327-block  0
        -:  328:      }
        -:  329:    } else {
     1974:  330:      curr_ind = Grammar::kEpsilonInd;
     1974:  330-block  0
        -:  331:    }
  3999316:  332:    auto iter = table_[stack.Top()].find(curr_ind);
  3999316:  332-block  0
call    0 returned 3999316
call    1 returned 3999316
call    2 returned 3999316
branch  3 taken 3999316 (fallthrough)
branch  4 taken 0 (throw)
  3999316:  333:    if (iter == table_[stack.Top()].end()) {
  3999316:  333-block  0
call    0 returned 3999316
call    1 returned 3999316
call    2 returned 3999316
call    3 returned 3999316
branch  4 taken 42 (fallthrough)
branch  5 taken 3999274
       42:  334:      return false;
       42:  334-block  0
        -:  335:    }
  3999274:  336:    const Action& act = iter->second;
  3999274:  336-block  0
call    0 returned 3999274
  3999274:  337:    switch (act.type) {
branch  0 taken 1999585
branch  1 taken 1999614
branch  2 taken 75
branch  3 taken 0
  1999585:  338:      case Shift:
  1999585:  339:        stack.Push(act.id);
  1999585:  339-block  0
call    0 returned 1999585
branch  1 taken 1999585 (fallthrough)
branch  2 taken 0 (throw)
  1999585:  340:        ++curr_pos;
  1999585:  341:        break;
  1999585:  341-block  0
  1999614:  342:      case Reduce:
  1999614:  343:        stack.Pop(act.length);
  1999614:  343-block  0
call    0 returned 1999614
  1999614:  344:        left = act.left;
  1999614:  345:        iter = table_[stack.Top()].find(left);
call    0 returned 1999614
call    1 returned 1999614
call    2 returned 1999614
branch  3 taken 1999614 (fallthrough)
branch  4 taken 0 (throw)
  1999614:  346:        if (iter == table_[stack.Top()].end()) {
  1999614:  346-block  0
call    0 returned 1999614
call    1 returned 1999614
call    2 returned 1999614
call    3 returned 1999614
branch  4 taken 0 (fallthrough)
branch  5 taken 1999614
    #####:  347:          return false;
    %%%%%:  347-block  0
        -:  348:        }
  1999614:  349:        stack.Push(iter->second.id);
  1999614:  349-block  0
call    0 returned 1999614
call    1 returned 1999614
branch  2 taken 1999614 (fallthrough)
branch  3 taken 0 (throw)
  1999614:  350:        break;
  1999614:  350-block  0
       75:  351:      case Accept:
       75:  352:        return true;
       75:  352-block  0
        -:  353:    }
        -:  354:  }
      131:  355:}
      131:  355-block  0
call    0 returned 131
    $$$$$:  355-block  1
call    1 never executed
        -:  356:
        -:  357:template <typename CharT>
function _ZN13BasicLRParserIwLm1EE4GotoERSt13unordered_setINS0_6BucketENS2_12BucketHasherESt8equal_toIS2_ESaIS2_EERSt6vectorISt17reference_wrapperIKS2_ESaISC_EEmRSt5stackINS0_9SituationESt5dequeISH_SaISH_EEE called 205 returned 100% blocks executed 82%
      205:  358:size_t BasicLRParser<CharT, 1>::Goto(USetBuckets& buckets,
        -:  359:                                     Vector<RefW<const Bucket>>& buckets_vec,
        -:  360:                                     size_t bucket_id,
        -:  361:                                     std::stack<Situation>& unhandled_sits) {
      205:  362:  Bucket bucket;
      205:  362-block  0
call    0 returned 205
      205:  363:  bucket.id = bucket_id;
      205:  364:  Closure(bucket, unhandled_sits);
call    0 returned 205
branch  1 taken 205 (fallthrough)
branch  2 taken 0 (throw)
      205:  365:  auto res = buckets.insert(std::move(bucket));
      205:  365-block  0
call    0 returned 205
call    1 returned 205
branch  2 taken 205 (fallthrough)
branch  3 taken 0 (throw)
      205:  366:  if (res.second) {
      205:  366-block  0
branch  0 taken 122 (fallthrough)
branch  1 taken 83
      122:  367:    buckets_vec.push_back(std::cref(*res.first));
      122:  367-block  0
call    0 returned 122
call    1 returned 122
call    2 returned 122
branch  3 taken 122 (fallthrough)
branch  4 taken 0 (throw)
      122:  367-block  1
    $$$$$:  367-block  2
        -:  368:  }
      410:  369:  return res.first->id;
      205:  369-block  0
call    0 returned 205
      205:  369-block  1
      205:  370:}
call    0 returned 205
    $$$$$:  370-block  0
call    1 never executed
        -:  371:
        -:  372:template <typename CharT>
function _ZN13BasicLRParserIwLm1EE11CreateTableEv called 9 returned 100% blocks executed 69%
        9:  373:void BasicLRParser<CharT, 1>::CreateTable() {
        9:  374:  USetBuckets buckets;
        9:  374-block  0
call    0 returned 9
        9:  375:  Vector<RefW<const Bucket>> buckets_vec;
call    0 returned 9
        9:  376:  std::stack<Situation> unhandled_sits;  // for closure
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  377:  unhandled_sits.push(grammar_.StartSituation());
        9:  377-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  377-block  1
call    3 returned 9
branch  4 taken 9 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  377-block  2
        9:  378:  Goto(buckets, buckets_vec, 0, unhandled_sits);
        9:  378-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  379:  size_t curr = 0;
      131:  380:  while (curr < buckets_vec.size()) {
        9:  380-block  0
      131:  380-block  1
call    0 returned 131
branch  1 taken 122
branch  2 taken 9 (fallthrough)
    $$$$$:  380-block  2
call    3 never executed
      122:  381:    UMap<IndexT, Action> table_cell;
      122:  381-block  0
call    0 returned 122
      122:  382:    const Bucket& bucket = buckets_vec[curr].get();
call    0 returned 122
call    1 returned 122
        -:  383:    // handle reduce situations
      230:  384:    for (const auto& map : bucket.reduce_sits) {
call    0 returned 122
call    1 returned 122
      108:  384-block  0
call    2 returned 108
      230:  384-block  1
call    3 returned 230
branch  4 taken 108
branch  5 taken 122 (fallthrough)
      108:  385:      table_cell[map.first] = map.second;
call    0 returned 108
branch  1 taken 108 (fallthrough)
branch  2 taken 0 (throw)
      108:  385-block  0
call    3 returned 108
        -:  386:    }
        -:  387:    // handle shift situations
      318:  388:    for (const auto& map : bucket.shift_sits) {
      122:  388-block  0
call    0 returned 122
call    1 returned 122
      196:  388-block  1
call    2 returned 196
      318:  388-block  2
call    3 returned 318
branch  4 taken 196
branch  5 taken 122 (fallthrough)
      196:  389:      if (table_cell.contains(map.first)) {
call    0 returned 196
branch  1 taken 196 (fallthrough)
branch  2 taken 0 (throw)
      196:  389-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 196
    #####:  390:        std::wcerr << "shift-reduce conflict, grammar is not LR(1)\n";
    %%%%%:  390-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  391:        Clear();  // to reuse parser
    %%%%%:  391-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  392:        exit(2);
    %%%%%:  392-block  0
call    0 never executed
        -:  393:        // todo: make exception
        -:  394:      }
      430:  395:      for (const auto& sit : map.second) {
      196:  395-block  0
call    0 returned 196
call    1 returned 196
      234:  395-block  1
call    2 returned 234
      234:  395-block  2
call    3 returned 234
      430:  395-block  3
call    4 returned 430
branch  5 taken 234
branch  6 taken 196 (fallthrough)
      234:  396:        Situation new_sit(sit);
      234:  397:        ++new_sit.pos;
      234:  398:        unhandled_sits.push(new_sit);
call    0 returned 234
branch  1 taken 234 (fallthrough)
branch  2 taken 0 (throw)
        -:  399:      }
        -:  400:      size_t bucket_id =
      196:  401:          Goto(buckets, buckets_vec, buckets.size(), unhandled_sits);
      196:  401-block  0
call    0 returned 196
call    1 returned 196
branch  2 taken 196 (fallthrough)
branch  3 taken 0 (throw)
      196:  402:      table_cell[map.first] = Action(bucket_id);
      196:  402-block  0
call    0 returned 196
call    1 returned 196
branch  2 taken 196 (fallthrough)
branch  3 taken 0 (throw)
      196:  402-block  1
call    4 returned 196
    $$$$$:  402-block  2
        -:  403:    }
        -:  404:    // handle accept situations
      122:  405:    if (bucket.contains_accept) {
      122:  405-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 113
        9:  406:      bool was_inserted =
        9:  407:          table_cell.insert({Grammar::kEpsilonInd, Action()}).second;
        9:  407-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
branch  3 taken 9 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  407-block  1
    $$$$$:  407-block  2
        9:  408:      if (!was_inserted) {
        9:  408-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  409:        std::wcerr << "reduce-reduce conflict, grammar is not LR(1)\n";
    %%%%%:  409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  410:        Clear();
    %%%%%:  410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  411:        exit(2);
    %%%%%:  411-block  0
call    0 never executed
        -:  412:        // todo: make exception
        -:  413:      }
        -:  414:    }
      122:  415:    table_.push_back(table_cell);
      122:  415-block  0
call    0 returned 122
branch  1 taken 122 (fallthrough)
branch  2 taken 0 (throw)
      122:  416:    ++curr;
      122:  416-block  0
call    0 returned 122
        -:  417:  }
        9:  418:}
        9:  418-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
    $$$$$:  418-block  1
call    3 never executed
    $$$$$:  418-block  2
call    4 never executed
    $$$$$:  418-block  3
call    5 never executed
        -:  419:
        -:  420:template <typename CharT>
function _ZNK13BasicLRParserIwLm1EE5FirstERKNS0_9SituationE called 137 returned 100% blocks executed 87%
      137:  421:BasicLRParser<CharT, 1>::Bitset BasicLRParser<CharT, 1>::First(
        -:  422:    const Situation& sit) const {
        -:  423:  /// this function may be called ONLY for sits that have not ended
      137:  424:  Bitset res(grammar_.BitsetSize());
      137:  424-block  0
call    0 returned 137
call    1 returned 137
call    2 returned 137
branch  3 taken 137 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  424-block  1
call    5 never executed
      137:  425:  size_t curr_pos = sit.pos + 1;
      137:  426:  if (curr_pos == sit.RightSize()) {
call    0 returned 137
branch  1 taken 33 (fallthrough)
branch  2 taken 104
       33:  427:    res = grammar_.First(sit.context);
       33:  427-block  0
call    0 returned 33
branch  1 taken 33 (fallthrough)
branch  2 taken 0 (throw)
       33:  427-block  1
call    3 returned 33
branch  4 taken 33 (fallthrough)
branch  5 taken 0 (throw)
       33:  428:    return res;
       33:  428-block  0
        -:  429:  }
      104:  430:  res |= grammar_.First(sit.RightSymbol(curr_pos));
      104:  430-block  0
call    0 returned 104
call    1 returned 104
branch  2 taken 104 (fallthrough)
branch  3 taken 0 (throw)
      104:  430-block  1
call    4 returned 104
      106:  431:  while (grammar_.ProduceEpsilon(sit.RightSymbol(curr_pos++))) {
      106:  431-block  0
call    0 returned 106
call    1 returned 106
branch  2 taken 106 (fallthrough)
branch  3 taken 0 (throw)
      106:  431-block  1
branch  4 taken 6
branch  5 taken 100 (fallthrough)
        6:  432:    if (curr_pos == sit.RightSize()) {
        6:  432-block  0
call    0 returned 6
branch  1 taken 4 (fallthrough)
branch  2 taken 2
        4:  433:      res |= grammar_.First(sit.context);
        4:  433-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  433-block  1
call    3 returned 4
        4:  434:      break;
        -:  435:    }
        2:  436:    res |= grammar_.First(sit.RightSymbol(curr_pos));
        2:  436-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  436-block  1
call    4 returned 2
        -:  437:  }
      104:  438:  return res;
      104:  438-block  0
    =====:  439:}
    $$$$$:  439-block  0
call    0 never executed
        -:  440:
        -:  441:template <typename CharT>
function _ZN13BasicLRParserIwLm1EE7ClosureERNS0_6BucketERSt5stackINS0_9SituationESt5dequeIS4_SaIS4_EEE called 205 returned 100% blocks executed 81%
      205:  442:void BasicLRParser<CharT, 1>::Closure(Bucket& bucket,
        -:  443:                                      std::stack<Situation>& unhandled_sits) {
      205:  444:  size_t count = unhandled_sits.size();
      205:  444-block  0
call    0 returned 205
      205:  445:  USetSits prev_sits;
call    0 returned 205
      912:  446:  while (!unhandled_sits.empty()) {
      912:  446-block  0
call    0 returned 912
branch  1 taken 707
branch  2 taken 205 (fallthrough)
      707:  447:    Situation sit = unhandled_sits.top();
      707:  447-block  0
call    0 returned 707
      707:  448:    unhandled_sits.pop();
call    0 returned 707
      707:  449:    if (count > 0) {
branch  0 taken 243 (fallthrough)
branch  1 taken 464
      243:  450:      prev_sits.insert(sit);
      243:  450-block  0
call    0 returned 243
branch  1 taken 243 (fallthrough)
branch  2 taken 0 (throw)
      243:  451:      --count;
      243:  451-block  0
        -:  452:    }
      707:  453:    if (sit.RoolEnded()) {
      707:  453-block  0
call    0 returned 707
branch  1 taken 707 (fallthrough)
branch  2 taken 0 (throw)
      707:  453-block  1
branch  3 taken 199 (fallthrough)
branch  4 taken 508
      199:  454:      if (sit.IsAccepted()) {
      199:  454-block  0
call    0 returned 199
branch  1 taken 9 (fallthrough)
branch  2 taken 190
        9:  455:        bucket.contains_accept = true;
        9:  455-block  0
        -:  456:      } else {
      190:  457:        Action action(sit.RightSize(), sit.left);
      190:  457-block  0
call    0 returned 190
call    1 returned 190
      190:  458:        bool inserted = bucket.reduce_sits.insert({sit.context, action}).second;
call    0 returned 190
call    1 returned 190
branch  2 taken 190 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  458-block  0
      190:  459:        if (!inserted) {
      190:  459-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 190
    #####:  460:          std::wcerr << "reduce-reduce conflict, grammar is not LR(1)\n";
    %%%%%:  460-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  461:          Clear();
    %%%%%:  461-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  462:          exit(2);
    %%%%%:  462-block  0
call    0 never executed
        -:  463:          // todo: make exception
        -:  464:        }
        -:  465:      }
        -:  466:    } else {
      508:  467:      bool inserted = bucket.shift_sits[sit.CurrSymbol()].insert(sit).second;
      508:  467-block  0
call    0 returned 508
call    1 returned 508
branch  2 taken 508 (fallthrough)
branch  3 taken 0 (throw)
      508:  467-block  1
call    4 returned 508
branch  5 taken 508 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:  467-block  2
      508:  468:      if (inserted && grammar_.IsNonterminal(sit.CurrSymbol())) {
      508:  468-block  0
branch  0 taken 508 (fallthrough)
branch  1 taken 0
      508:  468-block  1
call    2 returned 508
call    3 returned 508
branch  4 taken 137 (fallthrough)
branch  5 taken 371
      137:  468-block  2
      371:  468-block  3
      508:  468-block  4
branch  6 taken 137 (fallthrough)
branch  7 taken 371
      137:  469:        IndexT left = sit.CurrSymbol();
      137:  469-block  0
call    0 returned 137
      137:  470:        Bitset bitset = First(sit);
call    0 returned 137
branch  1 taken 137 (fallthrough)
branch  2 taken 0 (throw)
     1240:  471:        for (size_t i = 0; i < bitset.size(); ++i) {
      137:  471-block  0
     1103:  471-block  1
     1240:  471-block  2
call    0 returned 1240
branch  1 taken 1103
branch  2 taken 137 (fallthrough)
     1103:  472:          if (bitset.test(i)) {
     1103:  472-block  0
call    0 returned 1103
branch  1 taken 1103 (fallthrough)
branch  2 taken 0 (throw)
     1103:  472-block  1
branch  3 taken 143 (fallthrough)
branch  4 taken 960
      611:  473:            for (const auto& right : grammar_.RightPart(left)) {
      143:  473-block  0
call    0 returned 143
branch  1 taken 143 (fallthrough)
branch  2 taken 0 (throw)
      143:  473-block  1
call    3 returned 143
call    4 returned 143
      468:  473-block  2
call    5 returned 468
      468:  473-block  3
call    6 returned 468
      611:  473-block  4
call    7 returned 611
branch  8 taken 468
branch  9 taken 143 (fallthrough)
      468:  474:              Situation new_sit(right, left, grammar_.FromBitsetInd(i), 0);
call    0 returned 468
call    1 returned 468
call    2 returned 468
      468:  475:              if (prev_sits.insert(new_sit).second) {
call    0 returned 468
branch  1 taken 468 (fallthrough)
branch  2 taken 0 (throw)
      468:  475-block  0
branch  3 taken 464 (fallthrough)
branch  4 taken 4
      464:  476:                unhandled_sits.push(new_sit);
      464:  476-block  0
call    0 returned 464
branch  1 taken 464 (fallthrough)
branch  2 taken 0 (throw)
        -:  477:              }
        -:  478:            }
        -:  479:          }
        -:  480:        }
      137:  481:      }
      137:  481-block  0
call    0 returned 137
    $$$$$:  481-block  1
call    1 never executed
        -:  482:    }
        -:  483:  }
      205:  484:}
      205:  484-block  0
call    0 returned 205
    $$$$$:  484-block  1
call    1 never executed
        -:  485:
        -:  486:template <typename CharT>
function _ZN13BasicLRParserIwLm1EE5ClearEv called 9 returned 100% blocks executed 100%
        9:  487:void BasicLRParser<CharT, 1>::Clear() {
        9:  488:  grammar_.Clear();
        9:  488-block  0
call    0 returned 9
        9:  489:  table_.clear();
call    0 returned 9
        9:  490:}
        -:  491:
        -:  492:template <size_t K>
        -:  493:using LRParser = BasicLRParser<char, K>;
        -:  494:template <size_t K>
        -:  495:using WLRParser = BasicLRParser<wchar_t, K>;
