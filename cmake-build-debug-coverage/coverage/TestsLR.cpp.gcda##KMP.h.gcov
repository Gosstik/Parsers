        -:    0:Source:/home/ownstreamer/proga/C++/Parsers/src/utility/KMP.h
        -:    0:Graph:/home/ownstreamer/proga/C++/Parsers/cmake-build-debug-coverage/GoogleTests/CMakeFiles/Google_Tests_run.dir/src/TestsLR.cpp.gcno
        -:    0:Data:/home/ownstreamer/proga/C++/Parsers/cmake-build-debug-coverage/GoogleTests/CMakeFiles/Google_Tests_run.dir/src/TestsLR.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <string>
        -:    4:#include <vector>
        -:    5:
        -:    6:/// Knuth–Morris–Pratt algorithm
        -:    7:
        -:    8:namespace utl {
        -:    9:template <typename CharT>
        -:   10:using BasicString = std::basic_string<CharT>;
        -:   11:
        -:   12:template <typename CharT>
        -:   13:std::vector<BasicString<CharT>> Split(const BasicString<CharT>& src,
        -:   14:                                      const BasicString<CharT>& delim);
        -:   15:// LPS - longest proper prefix
        -:   16:template <typename CharT>
function _ZN3utl14CreateLPSArrayIwEEvRKNSt7__cxx1112basic_stringIT_St11char_traitsIS3_ESaIS3_EEEmRSt6vectorImSaImEE called 0 returned 0% blocks executed 0%
    #####:   17:void CreateLPSArray(const BasicString<CharT>& pattern, size_t pat_len,
        -:   18:                    std::vector<size_t>& lps) {
    #####:   19:  size_t len = 0;  // length of the previous longest prefix suffix
    #####:   20:  lps[0] = 0;      // lps[0] is always 0
    %%%%%:   20-block  0
call    0 never executed
    #####:   21:  size_t pos = 1;
    #####:   22:  while (pos < pat_len) {
    %%%%%:   22-block  0
branch  0 never executed
branch  1 never executed
    #####:   23:    if (pattern[pos] == pattern[len]) {
    %%%%%:   23-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   24:      lps[pos++] = ++len;
    %%%%%:   24-block  0
call    0 never executed
        -:   25:    } else {
    #####:   26:      if (len != 0) {
    %%%%%:   26-block  0
branch  0 never executed
branch  1 never executed
    #####:   27:        len = lps[len - 1];
    %%%%%:   27-block  0
call    0 never executed
        -:   28:      } else {
    #####:   29:        lps[pos++] = 0;
    %%%%%:   29-block  0
call    0 never executed
        -:   30:      }
        -:   31:    }
        -:   32:  }
    #####:   33:}
        -:   34:
        -:   35:template <typename CharT>
function _ZN3utl9KMPSearchIwEEvRKNSt7__cxx1112basic_stringIT_St11char_traitsIS3_ESaIS3_EEES9_RSt6vectorImSaImEE called 0 returned 0% blocks executed 0%
    #####:   36:void KMPSearch(const BasicString<CharT>& pattern, const BasicString<CharT>& string,
        -:   37:               std::vector<size_t>& match_indexes) {
    #####:   38:  size_t pat_len = pattern.size();
    %%%%%:   38-block  0
call    0 never executed
    #####:   39:  size_t str_len = string.size();
call    0 never executed
        -:   40:
    #####:   41:  std::vector<size_t> lps(pat_len);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:   41-block  0
    #####:   42:  CreateLPSArray(pattern, pat_len, lps);
call    0 never executed
        -:   43:
    #####:   44:  size_t pos_s = 0;  // index for string
    #####:   45:  size_t pos_p = 0;  // index for pattern
    #####:   46:  while ((str_len - pos_s) >= (pat_len - pos_p)) {
    %%%%%:   46-block  0
branch  0 never executed
branch  1 never executed
    #####:   47:    if (pattern[pos_p] == string[pos_s]) {
    %%%%%:   47-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   48:      pos_p++;
    #####:   49:      pos_s++;
    %%%%%:   49-block  0
        -:   50:    }
    #####:   51:    if (pos_p == pat_len) {
    %%%%%:   51-block  0
branch  0 never executed
branch  1 never executed
    #####:   52:      match_indexes.push_back(pos_s - pos_p);
    %%%%%:   52-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   52-block  1
    #####:   53:      pos_p = lps[pos_p - 1];
    %%%%%:   53-block  0
call    0 never executed
        -:   54:    }
        -:   55:    // mismatch after j matches
    #####:   56:    else if (pos_s < str_len && pattern[pos_p] != string[pos_s]) {
    %%%%%:   56-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   56-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   56-block  2
    %%%%%:   56-block  3
    %%%%%:   56-block  4
branch  6 never executed
branch  7 never executed
    #####:   57:      if (pos_p != 0) {
    %%%%%:   57-block  0
branch  0 never executed
branch  1 never executed
    #####:   58:        pos_p = lps[pos_p - 1];
    %%%%%:   58-block  0
call    0 never executed
        -:   59:      } else {
    #####:   60:        ++pos_s;
    %%%%%:   60-block  0
        -:   61:      }
        -:   62:    }
        -:   63:  }
    #####:   64:}
    %%%%%:   64-block  0
call    0 never executed
    $$$$$:   64-block  1
call    1 never executed
        -:   65:
        -:   66:template <typename CharT>
function _ZN3utl5SplitIwEESt6vectorINSt7__cxx1112basic_stringIT_St11char_traitsIS4_ESaIS4_EEESaIS8_EERKS8_SC_ called 0 returned 0% blocks executed 0%
    #####:   67:std::vector<BasicString<CharT>> Split(const BasicString<CharT>& src,
        -:   68:                                      const BasicString<CharT>& delim) {
    #####:   69:  if (src.empty() || src.size() < delim.size()) {
    %%%%%:   69-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   69-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   69-block  2
    %%%%%:   69-block  3
    %%%%%:   69-block  4
branch  7 never executed
branch  8 never executed
    #####:   70:    return {src};
    %%%%%:   70-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   70-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   70-block  2
call    7 never executed
    %%%%%:   70-block  3
branch  8 never executed
branch  9 never executed
    %%%%%:   70-block  4
call   10 never executed
    %%%%%:   70-block  5
    $$$$$:   70-block  6
call   11 never executed
    $$$$$:   70-block  7
    $$$$$:   70-block  8
    $$$$$:   70-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   70-block 10
call   14 never executed
    $$$$$:   70-block 11
        -:   71:  }
    #####:   72:  std::vector<size_t> match_indexes;
    %%%%%:   72-block  0
call    0 never executed
    #####:   73:  utl::KMPSearch(delim, src, match_indexes);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:  std::vector<BasicString<CharT>> result;
    %%%%%:   74-block  0
call    0 never executed
    #####:   75:  size_t prev_match_ind = 0;
    #####:   76:  for (auto index : match_indexes) {
call    0 never executed
call    1 never executed
    %%%%%:   76-block  0
call    2 never executed
    %%%%%:   76-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   77:    size_t substr_size = index - prev_match_ind;
    #####:   78:    result.emplace_back(src.substr(prev_match_ind, substr_size));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   78-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   78-block  1
call    6 never executed
    $$$$$:   78-block  2
call    7 never executed
    $$$$$:   78-block  3
    #####:   79:    prev_match_ind = index + delim.size();
call    0 never executed
call    1 never executed
        -:   80:  }
    #####:   81:  result.emplace_back(src.substr(prev_match_ind));
    %%%%%:   81-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   81-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   81-block  2
call    6 never executed
    $$$$$:   81-block  3
call    7 never executed
    $$$$$:   81-block  4
    #####:   82:  return result;
call    0 never executed
    #####:   83:}
call    0 never executed
call    1 never executed
    $$$$$:   83-block  0
call    2 never executed
    $$$$$:   83-block  1
call    3 never executed
        -:   84:}  // namespace dev
